CCS PCH C Compiler, Version 5.025, 40073               27-Thg11-17 10:21

               Filename:   D:\du lieu\BSD\PCB - charger\PCB_V2\i2C TEST_v2\I2C SLAVE\main.lst

               ROM used:   9442 bytes (58%)
                           Largest free fragment is 6938
               RAM used:   100 (13%) at main() level
                           151 (20%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   1468
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00CE
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   0122
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         EX_SLAVE.C                                //// 
.................... ////                                                                   //// 
.................... ////  This program uses the PIC in I2C slave mode to emulate the       //// 
.................... ////  24LC01 EEPROM. You can write to addresses 00h to 0Fh with it.    //// 
.................... ////                                                                   //// 
.................... ////  This program is to be used in conjunction with the ex_extee.c    //// 
.................... ////  sample.  Use the "#include <2402.C>" or "#include <2401.c>".     //// 
.................... ////  Only 16 bytes of address space are implemented, however.         //// 
.................... ////                                                                   //// 
.................... ////  If using a compiler version before 2.639 add "*0x14 = 0x3E;" to  //// 
.................... ////  the begining of main(), and add "NOFORCE_SW" as the last         //// 
.................... ////  parameter in the #use i2c directive.                             //// 
.................... ////                                                                   //// 
.................... ////  Jumpers:                                                         //// 
.................... ////     PCM,PCH    pin C7 to RS232 RX, pin C6 to RS232 TX             //// 
.................... ////                                                                   //// 
.................... ////  This example will work with the PCM and PCH compilers.  The      //// 
.................... ////  following conditional compilation lines are used to include a    //// 
.................... ////  valid device for each compiler.  Change the device, clock and    //// 
.................... ////  RS232 pins for your hardware if needed.                          //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
....................  
.................... #include <18F2480.h> 
.................... //////////// Standard Header file for the PIC18F2480 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2480 
00BA:  CLRF   FF7
00BC:  ADDLW  CA
00BE:  MOVWF  FF6
00C0:  MOVLW  00
00C2:  ADDWFC FF7,F
00C4:  TBLRD*+
00C6:  MOVF   FF5,W
00C8:  RETURN 0
00CA:  DATA 28,0C
00CC:  DATA 01,06
*
00FE:  ADDWF  FE8,W
0100:  CLRF   FF7
0102:  RLCF   FF7,F
0104:  ADDLW  19
0106:  MOVWF  FF6
0108:  MOVLW  01
010A:  ADDWFC FF7,F
010C:  TBLRD*-
010E:  MOVF   FF5,W
0110:  MOVWF  FFA
0112:  TBLRD*
0114:  MOVF   FF5,W
0116:  MOVWF  FF9
0118:  DATA DC,00
011A:  DATA E2,00
011C:  DATA E8,00
011E:  DATA EE,00
0120:  DATA F4,00
*
0132:  DATA 0D,0A
0134:  DATA 0D,0A
0136:  DATA 43,43
0138:  DATA 53,20
013A:  DATA 43,41
013C:  DATA 4E,20
013E:  DATA 45,58
0140:  DATA 41,4D
0142:  DATA 50,4C
0144:  DATA 45,0D
0146:  DATA 0A,00
0148:  DATA 0D,0A
014A:  DATA 52,75
014C:  DATA 6E,6E
014E:  DATA 69,6E
0150:  DATA 67,2E
0152:  DATA 2E,2E
0154:  DATA 00,00
0156:  DATA 0D,0A
0158:  DATA 20,73
015A:  DATA 74,61
015C:  DATA 74,65
015E:  DATA 20,6F
0160:  DATA 6E,20
0162:  DATA 69,32
0164:  DATA 63,20
0166:  DATA 73,6C
0168:  DATA 61,76
016A:  DATA 65,3A
016C:  DATA 20,25
016E:  DATA 30,32
0170:  DATA 78,00
0172:  DATA 0D,0A
0174:  DATA 20,69
0176:  DATA 6E,63
0178:  DATA 6F,6D
017A:  DATA 69,6E
017C:  DATA 67,20
017E:  DATA 66,72
0180:  DATA 6F,6D
0182:  DATA 20,6D
0184:  DATA 61,73
0186:  DATA 74,65
0188:  DATA 72,20
018A:  DATA 69,32
018C:  DATA 63,3A
018E:  DATA 20,25
0190:  DATA 30,32
0192:  DATA 78,00
0194:  DATA 20,20
0196:  DATA 20,20
0198:  DATA 20,20
019A:  DATA 00,00
019C:  DATA 20,20
019E:  DATA 20,20
01A0:  DATA 00,00
01A2:  DATA 20,20
01A4:  DATA 20,20
01A6:  DATA 20,20
01A8:  DATA 00,00
01AA:  DATA 20,20
01AC:  DATA 20,20
01AE:  DATA 00,00
01B0:  DATA 20,20
01B2:  DATA 20,00
01B4:  DATA 53,65
01B6:  DATA 74,20
01B8:  DATA 4C,20
01BA:  DATA 20,20
01BC:  DATA 20,20
01BE:  DATA 20,20
01C0:  DATA 20,20
01C2:  DATA 20,20
01C4:  DATA 00,00
01C6:  DATA 20,20
01C8:  DATA 20,20
01CA:  DATA 20,20
01CC:  DATA 00,00
01CE:  DATA 41,31
01D0:  DATA 3A,25
01D2:  DATA 55,00
01D4:  DATA 20,20
01D6:  DATA 20,20
01D8:  DATA 20,20
01DA:  DATA 20,20
01DC:  DATA 00,00
01DE:  DATA 53,65
01E0:  DATA 74,20
01E2:  DATA 48,20
01E4:  DATA 20,20
01E6:  DATA 20,20
01E8:  DATA 20,20
01EA:  DATA 20,20
01EC:  DATA 20,20
01EE:  DATA 00,00
01F0:  DATA 20,20
01F2:  DATA 20,20
01F4:  DATA 20,20
01F6:  DATA 00,00
01F8:  DATA 41,30
01FA:  DATA 3A,25
01FC:  DATA 55,00
01FE:  DATA 20,20
0200:  DATA 20,20
0202:  DATA 20,00
0204:  DATA 20,20
0206:  DATA 4D,61
0208:  DATA 6E,75
020A:  DATA 61,6C
020C:  DATA 20,42
020E:  DATA 6C,6F
0210:  DATA 77,20
0212:  DATA 31,20
0214:  DATA 00,00
0216:  DATA 20,20
0218:  DATA 20,00
021A:  DATA 41,30
021C:  DATA 3A,25
021E:  DATA 55,00
0220:  DATA 20,20
0222:  DATA 20,20
0224:  DATA 20,00
0226:  DATA 4D,31
0228:  DATA 3A,25
022A:  DATA 75,00
022C:  DATA 20,20
022E:  DATA 4D,61
0230:  DATA 6E,75
0232:  DATA 61,6C
0234:  DATA 20,42
0236:  DATA 6C,6F
0238:  DATA 77,20
023A:  DATA 32,20
023C:  DATA 00,00
023E:  DATA 20,20
0240:  DATA 20,00
0242:  DATA 41,30
0244:  DATA 3A,25
0246:  DATA 55,00
0248:  DATA 20,20
024A:  DATA 20,20
024C:  DATA 20,00
024E:  DATA 4D,32
0250:  DATA 3A,25
0252:  DATA 75,00
0254:  DATA 53,65
0256:  DATA 74,20
0258:  DATA 42,6C
025A:  DATA 6F,77
025C:  DATA 73,20
025E:  DATA 20,20
0260:  DATA 20,20
0262:  DATA 20,20
0264:  DATA 00,00
0266:  DATA 20,20
0268:  DATA 20,00
026A:  DATA 4E,6F
026C:  DATA 42,3A
026E:  DATA 25,55
0270:  DATA 00,00
0272:  DATA 20,20
0274:  DATA 20,00
0276:  DATA 4E,6F
0278:  DATA 42,53
027A:  DATA 65,74
027C:  DATA 3A,25
027E:  DATA 55,00
0280:  DATA 20,20
0282:  DATA 20,20
0284:  DATA 20,00
0286:  DATA 20,20
0288:  DATA 20,20
028A:  DATA 00,00
028C:  DATA 20,20
028E:  DATA 20,20
0290:  DATA 00,00
0292:  DATA 20,20
0294:  DATA 20,20
0296:  DATA 20,20
0298:  DATA 42,4D
029A:  DATA 45,00
029C:  DATA 20,20
029E:  DATA 20,20
02A0:  DATA 20,00
02A2:  DATA 53,48
02A4:  DATA 54,20
02A6:  DATA 54,3A
02A8:  DATA 25,33
02AA:  DATA 2E,31
02AC:  DATA 66,00
02AE:  DATA 20,20
02B0:  DATA 20,00
02B2:  DATA 20,20
02B4:  DATA 20,20
02B6:  DATA 20,00
02B8:  DATA 53,48
02BA:  DATA 54,20
02BC:  DATA 48,3A
02BE:  DATA 25,33
02C0:  DATA 2E,31
02C2:  DATA 66,00
02C4:  DATA 52,48
02C6:  DATA 20,20
02C8:  DATA 20,00
02CA:  DATA 20,20
02CC:  DATA 20,00
02CE:  DATA 20,20
02D0:  DATA 20,20
02D2:  DATA 20,20
02D4:  DATA 20,20
02D6:  DATA 00,00
02D8:  DATA 4D,41
02DA:  DATA 58,20
02DC:  DATA 54,3A
02DE:  DATA 25,33
02E0:  DATA 2E,31
02E2:  DATA 66,00
02E4:  DATA 20,20
02E6:  DATA 20,20
02E8:  DATA 20,20
02EA:  DATA 20,20
02EC:  DATA 20,20
02EE:  DATA 20,20
02F0:  DATA 20,20
02F2:  DATA 20,20
02F4:  DATA 00,00
02F6:  DATA 20,20
02F8:  DATA 20,20
02FA:  DATA 20,20
02FC:  DATA 20,20
02FE:  DATA 20,00
0300:  DATA 52,53
0302:  DATA 43,20
0304:  DATA 50,3A
0306:  DATA 25,33
0308:  DATA 2E,31
030A:  DATA 66,00
030C:  DATA 20,20
030E:  DATA 20,20
0310:  DATA 20,20
0312:  DATA 20,20
0314:  DATA 20,20
0316:  DATA 20,20
0318:  DATA 20,20
031A:  DATA 20,20
031C:  DATA 00,00
031E:  DATA 50,72
0320:  DATA 65,73
0322:  DATA 73,75
0324:  DATA 72,65
0326:  DATA 20,52
0328:  DATA 53,43
032A:  DATA 20,49
032C:  DATA 44,3A
032E:  DATA 32,31
0330:  DATA 20,3D
0332:  DATA 20,25
0334:  DATA 66,20
0336:  DATA 00,00
0338:  DATA 54,65
033A:  DATA 6D,70
033C:  DATA 65,72
033E:  DATA 61,74
0340:  DATA 75,72
0342:  DATA 65,20
0344:  DATA 42,4D
0346:  DATA 45,32
0348:  DATA 38,30
034A:  DATA 20,49
034C:  DATA 44,3A
034E:  DATA 32,33
0350:  DATA 20,3D
0352:  DATA 20,25
0354:  DATA 66,20
0356:  DATA 00,00
0358:  DATA 50,72
035A:  DATA 65,73
035C:  DATA 73,75
035E:  DATA 72,65
0360:  DATA 20,42
0362:  DATA 4D,45
0364:  DATA 32,38
0366:  DATA 30,20
0368:  DATA 49,44
036A:  DATA 3A,32
036C:  DATA 33,20
036E:  DATA 3D,20
0370:  DATA 25,66
0372:  DATA 20,00
0374:  DATA 48,75
0376:  DATA 6D,69
0378:  DATA 64,69
037A:  DATA 74,79
037C:  DATA 20,42
037E:  DATA 4D,45
0380:  DATA 32,38
0382:  DATA 30,20
0384:  DATA 49,44
0386:  DATA 3A,32
0388:  DATA 35,20
038A:  DATA 3D,20
038C:  DATA 25,66
038E:  DATA 20,00
0390:  DATA 54,65
0392:  DATA 6D,70
0394:  DATA 65,72
0396:  DATA 61,74
0398:  DATA 75,72
039A:  DATA 65,20
039C:  DATA 53,48
039E:  DATA 54,5F
03A0:  DATA 37,35
03A2:  DATA 20,49
03A4:  DATA 44,3A
03A6:  DATA 32,37
03A8:  DATA 20,3D
03AA:  DATA 20,25
03AC:  DATA 66,20
03AE:  DATA 00,00
03B0:  DATA 50,72
03B2:  DATA 65,73
03B4:  DATA 73,75
03B6:  DATA 72,65
03B8:  DATA 20,53
03BA:  DATA 48,54
03BC:  DATA 37,35
03BE:  DATA 20,49
03C0:  DATA 44,3A
03C2:  DATA 32,37
03C4:  DATA 20,3D
03C6:  DATA 20,25
03C8:  DATA 66,20
03CA:  DATA 00,00
03CC:  DATA 54,65
03CE:  DATA 6D,70
03D0:  DATA 65,72
03D2:  DATA 61,74
03D4:  DATA 75,72
03D6:  DATA 65,20
03D8:  DATA 4D,41
03DA:  DATA 58,33
03DC:  DATA 31,38
03DE:  DATA 35,35
03E0:  DATA 20,49
03E2:  DATA 44,3A
03E4:  DATA 32,39
03E6:  DATA 20,3D
03E8:  DATA 20,25
03EA:  DATA 66,20
03EC:  DATA 00,00
03EE:  DATA 0D,0A
03F0:  DATA 47,4F
03F2:  DATA 54,3A
03F4:  DATA 20,42
03F6:  DATA 55,46
03F8:  DATA 46,3D
03FA:  DATA 25,55
03FC:  DATA 20,49
03FE:  DATA 44,3D
0400:  DATA 25,4C
0402:  DATA 55,20
0404:  DATA 4C,45
0406:  DATA 4E,3D
0408:  DATA 25,55
040A:  DATA 20,4F
040C:  DATA 56,46
040E:  DATA 3D,25
0410:  DATA 55,20
0412:  DATA 00,00
0414:  DATA 46,49
0416:  DATA 4C,54
0418:  DATA 3D,25
041A:  DATA 55,20
041C:  DATA 52,54
041E:  DATA 52,3D
0420:  DATA 25,55
0422:  DATA 20,45
0424:  DATA 58,54
0426:  DATA 3D,25
0428:  DATA 55,20
042A:  DATA 49,4E
042C:  DATA 56,3D
042E:  DATA 25,55
0430:  DATA 00,00
0432:  DATA 0D,0A
0434:  DATA 20,20
0436:  DATA 20,20
0438:  DATA 44,41
043A:  DATA 54,41
043C:  DATA 20,3D
043E:  DATA 20,00
0440:  DATA 0D,0A
0442:  DATA 46,41
0444:  DATA 49,4C
0446:  DATA 20,6F
0448:  DATA 6E,20
044A:  DATA 47,45
044C:  DATA 54,44
044E:  DATA 0D,0A
0450:  DATA 00,00
0452:  TBLRD*+
0454:  MOVF   FF5,F
0456:  BZ    0472
0458:  MOVFF  FF6,7C
045C:  MOVFF  FF7,7D
0460:  MOVF   FF5,W
0462:  BTFSS  F9E.4
0464:  BRA    0462
0466:  MOVWF  FAD
0468:  MOVFF  7C,FF6
046C:  MOVFF  7D,FF7
0470:  BRA    0452
0472:  RETURN 0
*
07DA:  TBLRD*+
07DC:  MOVFF  FF6,81
07E0:  MOVFF  FF7,82
07E4:  MOVF   FF5,W
07E6:  BTFSS  F9E.4
07E8:  BRA    07E6
07EA:  MOVWF  FAD
07EC:  MOVFF  81,FF6
07F0:  MOVFF  82,FF7
07F4:  DECFSZ x80,F
07F6:  BRA    07DA
07F8:  RETURN 0
07FA:  BTFSC  x7E.7
07FC:  BRA    081E
07FE:  MOVLW  0F
0800:  MOVWF  00
0802:  SWAPF  x7D,W
0804:  ANDWF  00,F
0806:  MOVLW  0A
0808:  SUBWF  00,W
080A:  BC    0812
080C:  MOVLW  30
080E:  ADDWF  00,F
0810:  BRA    0816
0812:  MOVF   x7E,W
0814:  ADDWF  00,F
0816:  MOVF   00,W
0818:  BTFSS  F9E.4
081A:  BRA    0818
081C:  MOVWF  FAD
081E:  MOVLW  0F
0820:  ANDWF  x7D,F
0822:  MOVLW  0A
0824:  SUBWF  x7D,W
0826:  BC    082C
0828:  MOVLW  30
082A:  BRA    0830
082C:  BCF    x7E.7
082E:  MOVF   x7E,W
0830:  ADDWF  x7D,F
0832:  MOVF   x7D,W
0834:  BTFSS  F9E.4
0836:  BRA    0834
0838:  MOVWF  FAD
083A:  RETURN 0
083C:  MOVLW  8E
083E:  MOVWF  00
0840:  MOVFF  7D,01
0844:  MOVFF  7C,02
0848:  CLRF   03
084A:  MOVF   01,F
084C:  BNZ   0860
084E:  MOVFF  02,01
0852:  CLRF   02
0854:  MOVLW  08
0856:  SUBWF  00,F
0858:  MOVF   01,F
085A:  BNZ   0860
085C:  CLRF   00
085E:  BRA    0870
0860:  BCF    FD8.0
0862:  BTFSC  01.7
0864:  BRA    086E
0866:  RLCF   02,F
0868:  RLCF   01,F
086A:  DECF   00,F
086C:  BRA    0860
086E:  BCF    01.7
0870:  RETURN 0
0872:  MOVF   x89,W
0874:  BTFSC  FD8.2
0876:  BRA    095A
0878:  MOVWF  00
087A:  MOVF   x8D,W
087C:  BTFSC  FD8.2
087E:  BRA    095A
0880:  ADDWF  00,F
0882:  BNC   088C
0884:  MOVLW  81
0886:  ADDWF  00,F
0888:  BC    095A
088A:  BRA    0894
088C:  MOVLW  7F
088E:  SUBWF  00,F
0890:  BNC   095A
0892:  BZ    095A
0894:  MOVFF  8A,91
0898:  MOVF   x8E,W
089A:  XORWF  x91,F
089C:  BSF    x8A.7
089E:  BSF    x8E.7
08A0:  MOVF   x8C,W
08A2:  MULWF  x90
08A4:  MOVFF  FF4,93
08A8:  MOVF   x8B,W
08AA:  MULWF  x8F
08AC:  MOVFF  FF4,03
08B0:  MOVFF  FF3,92
08B4:  MULWF  x90
08B6:  MOVF   FF3,W
08B8:  ADDWF  x93,F
08BA:  MOVF   FF4,W
08BC:  ADDWFC x92,F
08BE:  MOVLW  00
08C0:  ADDWFC 03,F
08C2:  MOVF   x8C,W
08C4:  MULWF  x8F
08C6:  MOVF   FF3,W
08C8:  ADDWF  x93,F
08CA:  MOVF   FF4,W
08CC:  ADDWFC x92,F
08CE:  MOVLW  00
08D0:  CLRF   02
08D2:  ADDWFC 03,F
08D4:  ADDWFC 02,F
08D6:  MOVF   x8A,W
08D8:  MULWF  x90
08DA:  MOVF   FF3,W
08DC:  ADDWF  x92,F
08DE:  MOVF   FF4,W
08E0:  ADDWFC 03,F
08E2:  MOVLW  00
08E4:  ADDWFC 02,F
08E6:  MOVF   x8A,W
08E8:  MULWF  x8F
08EA:  MOVF   FF3,W
08EC:  ADDWF  03,F
08EE:  MOVF   FF4,W
08F0:  ADDWFC 02,F
08F2:  MOVLW  00
08F4:  CLRF   01
08F6:  ADDWFC 01,F
08F8:  MOVF   x8C,W
08FA:  MULWF  x8E
08FC:  MOVF   FF3,W
08FE:  ADDWF  x92,F
0900:  MOVF   FF4,W
0902:  ADDWFC 03,F
0904:  MOVLW  00
0906:  ADDWFC 02,F
0908:  ADDWFC 01,F
090A:  MOVF   x8B,W
090C:  MULWF  x8E
090E:  MOVF   FF3,W
0910:  ADDWF  03,F
0912:  MOVF   FF4,W
0914:  ADDWFC 02,F
0916:  MOVLW  00
0918:  ADDWFC 01,F
091A:  MOVF   x8A,W
091C:  MULWF  x8E
091E:  MOVF   FF3,W
0920:  ADDWF  02,F
0922:  MOVF   FF4,W
0924:  ADDWFC 01,F
0926:  INCF   00,F
0928:  BTFSC  01.7
092A:  BRA    0936
092C:  RLCF   x92,F
092E:  RLCF   03,F
0930:  RLCF   02,F
0932:  RLCF   01,F
0934:  DECF   00,F
0936:  MOVLW  00
0938:  BTFSS  x92.7
093A:  BRA    0950
093C:  INCF   03,F
093E:  ADDWFC 02,F
0940:  ADDWFC 01,F
0942:  MOVF   01,W
0944:  BNZ   0950
0946:  MOVF   02,W
0948:  BNZ   0950
094A:  MOVF   03,W
094C:  BNZ   0950
094E:  INCF   00,F
0950:  BTFSC  x91.7
0952:  BSF    01.7
0954:  BTFSS  x91.7
0956:  BCF    01.7
0958:  BRA    0962
095A:  CLRF   00
095C:  CLRF   01
095E:  CLRF   02
0960:  CLRF   03
0962:  RETURN 0
0964:  MOVLW  80
0966:  BTFSC  FD8.1
0968:  XORWF  x85,F
096A:  CLRF   x8A
096C:  CLRF   x8B
096E:  MOVFF  81,89
0972:  MOVF   x85,W
0974:  XORWF  x89,F
0976:  MOVF   x80,W
0978:  BTFSC  FD8.2
097A:  BRA    0B34
097C:  MOVWF  x88
097E:  MOVWF  00
0980:  MOVF   x84,W
0982:  BTFSC  FD8.2
0984:  BRA    0B46
0986:  SUBWF  x88,F
0988:  BTFSC  FD8.2
098A:  BRA    0A8E
098C:  BNC   0A08
098E:  MOVFF  85,8E
0992:  BSF    x8E.7
0994:  MOVFF  86,8D
0998:  MOVFF  87,8C
099C:  CLRF   x8B
099E:  BCF    FD8.0
09A0:  RRCF   x8E,F
09A2:  RRCF   x8D,F
09A4:  RRCF   x8C,F
09A6:  RRCF   x8B,F
09A8:  DECFSZ x88,F
09AA:  BRA    099C
09AC:  BTFSS  x89.7
09AE:  BRA    09B6
09B0:  BSF    x8A.0
09B2:  BRA    0B6E
09B4:  BCF    x8A.0
09B6:  BCF    x88.0
09B8:  BSF    x8A.4
09BA:  CLRF   FEA
09BC:  MOVLW  83
09BE:  MOVWF  FE9
09C0:  BRA    0B94
09C2:  BCF    x8A.4
09C4:  BTFSC  x89.7
09C6:  BRA    09DC
09C8:  BTFSS  x88.0
09CA:  BRA    09F2
09CC:  RRCF   x8E,F
09CE:  RRCF   x8D,F
09D0:  RRCF   x8C,F
09D2:  RRCF   x8B,F
09D4:  INCF   00,F
09D6:  BTFSC  FD8.2
09D8:  BRA    0B64
09DA:  BRA    09F2
09DC:  BTFSC  x8E.7
09DE:  BRA    09F8
09E0:  BCF    FD8.0
09E2:  RLCF   x8B,F
09E4:  RLCF   x8C,F
09E6:  RLCF   x8D,F
09E8:  RLCF   x8E,F
09EA:  DECF   00,F
09EC:  BTFSC  FD8.2
09EE:  BRA    0B64
09F0:  BRA    09DC
09F2:  BSF    x8A.6
09F4:  BRA    0ACC
09F6:  BCF    x8A.6
09F8:  MOVFF  81,89
09FC:  BTFSS  x81.7
09FE:  BRA    0A04
0A00:  BSF    x8E.7
0A02:  BRA    0B56
0A04:  BCF    x8E.7
0A06:  BRA    0B56
0A08:  MOVFF  84,88
0A0C:  MOVFF  84,00
0A10:  MOVF   x80,W
0A12:  SUBWF  x88,F
0A14:  MOVFF  81,8E
0A18:  BSF    x8E.7
0A1A:  MOVFF  82,8D
0A1E:  MOVFF  83,8C
0A22:  CLRF   x8B
0A24:  BCF    FD8.0
0A26:  RRCF   x8E,F
0A28:  RRCF   x8D,F
0A2A:  RRCF   x8C,F
0A2C:  RRCF   x8B,F
0A2E:  DECFSZ x88,F
0A30:  BRA    0A22
0A32:  BTFSS  x89.7
0A34:  BRA    0A3C
0A36:  BSF    x8A.1
0A38:  BRA    0B6E
0A3A:  BCF    x8A.1
0A3C:  BCF    x88.0
0A3E:  BSF    x8A.5
0A40:  CLRF   FEA
0A42:  MOVLW  87
0A44:  MOVWF  FE9
0A46:  BRA    0B94
0A48:  BCF    x8A.5
0A4A:  BTFSC  x89.7
0A4C:  BRA    0A62
0A4E:  BTFSS  x88.0
0A50:  BRA    0A78
0A52:  RRCF   x8E,F
0A54:  RRCF   x8D,F
0A56:  RRCF   x8C,F
0A58:  RRCF   x8B,F
0A5A:  INCF   00,F
0A5C:  BTFSC  FD8.2
0A5E:  BRA    0B64
0A60:  BRA    0A78
0A62:  BTFSC  x8E.7
0A64:  BRA    0A7E
0A66:  BCF    FD8.0
0A68:  RLCF   x8B,F
0A6A:  RLCF   x8C,F
0A6C:  RLCF   x8D,F
0A6E:  RLCF   x8E,F
0A70:  DECF   00,F
0A72:  BTFSC  FD8.2
0A74:  BRA    0B64
0A76:  BRA    0A62
0A78:  BSF    x8A.7
0A7A:  BRA    0ACC
0A7C:  BCF    x8A.7
0A7E:  MOVFF  85,89
0A82:  BTFSS  x85.7
0A84:  BRA    0A8A
0A86:  BSF    x8E.7
0A88:  BRA    0B56
0A8A:  BCF    x8E.7
0A8C:  BRA    0B56
0A8E:  MOVFF  85,8E
0A92:  BSF    x8E.7
0A94:  MOVFF  86,8D
0A98:  MOVFF  87,8C
0A9C:  BTFSS  x89.7
0A9E:  BRA    0AA8
0AA0:  BCF    x8E.7
0AA2:  BSF    x8A.2
0AA4:  BRA    0B6E
0AA6:  BCF    x8A.2
0AA8:  CLRF   x8B
0AAA:  BCF    x88.0
0AAC:  CLRF   FEA
0AAE:  MOVLW  83
0AB0:  MOVWF  FE9
0AB2:  BRA    0B94
0AB4:  BTFSC  x89.7
0AB6:  BRA    0AF0
0AB8:  MOVFF  81,89
0ABC:  BTFSS  x88.0
0ABE:  BRA    0ACC
0AC0:  RRCF   x8E,F
0AC2:  RRCF   x8D,F
0AC4:  RRCF   x8C,F
0AC6:  RRCF   x8B,F
0AC8:  INCF   00,F
0ACA:  BZ    0B64
0ACC:  BTFSS  x8B.7
0ACE:  BRA    0AE6
0AD0:  INCF   x8C,F
0AD2:  BNZ   0AE6
0AD4:  INCF   x8D,F
0AD6:  BNZ   0AE6
0AD8:  INCF   x8E,F
0ADA:  BNZ   0AE6
0ADC:  RRCF   x8E,F
0ADE:  RRCF   x8D,F
0AE0:  RRCF   x8C,F
0AE2:  INCF   00,F
0AE4:  BZ    0B64
0AE6:  BTFSC  x8A.6
0AE8:  BRA    09F6
0AEA:  BTFSC  x8A.7
0AEC:  BRA    0A7C
0AEE:  BRA    0B28
0AF0:  MOVLW  80
0AF2:  XORWF  x8E,F
0AF4:  BTFSS  x8E.7
0AF6:  BRA    0B00
0AF8:  BRA    0B6E
0AFA:  MOVFF  85,89
0AFE:  BRA    0B14
0B00:  MOVFF  81,89
0B04:  MOVF   x8E,F
0B06:  BNZ   0B14
0B08:  MOVF   x8D,F
0B0A:  BNZ   0B14
0B0C:  MOVF   x8C,F
0B0E:  BNZ   0B14
0B10:  CLRF   00
0B12:  BRA    0B56
0B14:  BTFSC  x8E.7
0B16:  BRA    0B28
0B18:  BCF    FD8.0
0B1A:  RLCF   x8B,F
0B1C:  RLCF   x8C,F
0B1E:  RLCF   x8D,F
0B20:  RLCF   x8E,F
0B22:  DECFSZ 00,F
0B24:  BRA    0B14
0B26:  BRA    0B64
0B28:  BTFSS  x89.7
0B2A:  BRA    0B30
0B2C:  BSF    x8E.7
0B2E:  BRA    0B56
0B30:  BCF    x8E.7
0B32:  BRA    0B56
0B34:  MOVFF  84,00
0B38:  MOVFF  85,8E
0B3C:  MOVFF  86,8D
0B40:  MOVFF  87,8C
0B44:  BRA    0B56
0B46:  MOVFF  80,00
0B4A:  MOVFF  81,8E
0B4E:  MOVFF  82,8D
0B52:  MOVFF  83,8C
0B56:  MOVFF  8E,01
0B5A:  MOVFF  8D,02
0B5E:  MOVFF  8C,03
0B62:  BRA    0BCC
0B64:  CLRF   00
0B66:  CLRF   01
0B68:  CLRF   02
0B6A:  CLRF   03
0B6C:  BRA    0BCC
0B6E:  CLRF   x8B
0B70:  COMF   x8C,F
0B72:  COMF   x8D,F
0B74:  COMF   x8E,F
0B76:  COMF   x8B,F
0B78:  INCF   x8B,F
0B7A:  BNZ   0B86
0B7C:  INCF   x8C,F
0B7E:  BNZ   0B86
0B80:  INCF   x8D,F
0B82:  BNZ   0B86
0B84:  INCF   x8E,F
0B86:  BTFSC  x8A.0
0B88:  BRA    09B4
0B8A:  BTFSC  x8A.1
0B8C:  BRA    0A3A
0B8E:  BTFSC  x8A.2
0B90:  BRA    0AA6
0B92:  BRA    0AFA
0B94:  MOVF   FEF,W
0B96:  ADDWF  x8C,F
0B98:  BNC   0BA4
0B9A:  INCF   x8D,F
0B9C:  BNZ   0BA4
0B9E:  INCF   x8E,F
0BA0:  BTFSC  FD8.2
0BA2:  BSF    x88.0
0BA4:  MOVF   FED,F
0BA6:  MOVF   FEF,W
0BA8:  ADDWF  x8D,F
0BAA:  BNC   0BB2
0BAC:  INCF   x8E,F
0BAE:  BTFSC  FD8.2
0BB0:  BSF    x88.0
0BB2:  MOVF   FED,F
0BB4:  MOVF   FEF,W
0BB6:  BTFSC  FEF.7
0BB8:  BRA    0BBC
0BBA:  XORLW  80
0BBC:  ADDWF  x8E,F
0BBE:  BTFSC  FD8.0
0BC0:  BSF    x88.0
0BC2:  BTFSC  x8A.4
0BC4:  BRA    09C2
0BC6:  BTFSC  x8A.5
0BC8:  BRA    0A48
0BCA:  BRA    0AB4
0BCC:  RETURN 0
*
0C06:  ADDWF  FE8,W
0C08:  CLRF   FF7
0C0A:  RLCF   FF7,F
0C0C:  ADDLW  21
0C0E:  MOVWF  FF6
0C10:  MOVLW  0C
0C12:  ADDWFC FF7,F
0C14:  TBLRD*-
0C16:  MOVF   FF5,W
0C18:  MOVWF  FFA
0C1A:  TBLRD*
0C1C:  MOVF   FF5,W
0C1E:  MOVWF  FF9
0C20:  DATA DC,0B
0C22:  DATA E2,0B
0C24:  DATA E8,0B
0C26:  DATA EE,0B
*
0C6A:  TBLRD*+
0C6C:  MOVF   FF5,F
0C6E:  BZ    0C88
0C70:  MOVFF  FF6,7C
0C74:  MOVFF  FF7,7D
0C78:  MOVFF  FF5,89
0C7C:  RCALL  0C28
0C7E:  MOVFF  7C,FF6
0C82:  MOVFF  7D,FF7
0C86:  BRA    0C6A
0C88:  RETURN 0
0C8A:  MOVF   x89,W
0C8C:  SUBLW  B6
0C8E:  MOVWF  x89
0C90:  CLRF   03
0C92:  MOVFF  8A,8D
0C96:  BSF    x8A.7
0C98:  BCF    FD8.0
0C9A:  RRCF   x8A,F
0C9C:  RRCF   x8B,F
0C9E:  RRCF   x8C,F
0CA0:  RRCF   03,F
0CA2:  RRCF   02,F
0CA4:  RRCF   01,F
0CA6:  RRCF   00,F
0CA8:  DECFSZ x89,F
0CAA:  BRA    0C98
0CAC:  BTFSS  x8D.7
0CAE:  BRA    0CC6
0CB0:  COMF   00,F
0CB2:  COMF   01,F
0CB4:  COMF   02,F
0CB6:  COMF   03,F
0CB8:  INCF   00,F
0CBA:  BTFSC  FD8.2
0CBC:  INCF   01,F
0CBE:  BTFSC  FD8.2
0CC0:  INCF   02,F
0CC2:  BTFSC  FD8.2
0CC4:  INCF   03,F
0CC6:  RETURN 0
0CC8:  BTFSC  FD8.1
0CCA:  BRA    0CD2
0CCC:  CLRF   FEA
0CCE:  MOVLW  92
0CD0:  MOVWF  FE9
0CD2:  CLRF   00
0CD4:  CLRF   01
0CD6:  CLRF   02
0CD8:  CLRF   03
0CDA:  CLRF   x92
0CDC:  CLRF   x93
0CDE:  CLRF   x94
0CE0:  CLRF   x95
0CE2:  MOVF   x91,W
0CE4:  IORWF  x90,W
0CE6:  IORWF  x8F,W
0CE8:  IORWF  x8E,W
0CEA:  BZ    0D44
0CEC:  MOVLW  20
0CEE:  MOVWF  x96
0CF0:  BCF    FD8.0
0CF2:  RLCF   x8A,F
0CF4:  RLCF   x8B,F
0CF6:  RLCF   x8C,F
0CF8:  RLCF   x8D,F
0CFA:  RLCF   x92,F
0CFC:  RLCF   x93,F
0CFE:  RLCF   x94,F
0D00:  RLCF   x95,F
0D02:  MOVF   x91,W
0D04:  SUBWF  x95,W
0D06:  BNZ   0D18
0D08:  MOVF   x90,W
0D0A:  SUBWF  x94,W
0D0C:  BNZ   0D18
0D0E:  MOVF   x8F,W
0D10:  SUBWF  x93,W
0D12:  BNZ   0D18
0D14:  MOVF   x8E,W
0D16:  SUBWF  x92,W
0D18:  BNC   0D38
0D1A:  MOVF   x8E,W
0D1C:  SUBWF  x92,F
0D1E:  MOVF   x8F,W
0D20:  BTFSS  FD8.0
0D22:  INCFSZ x8F,W
0D24:  SUBWF  x93,F
0D26:  MOVF   x90,W
0D28:  BTFSS  FD8.0
0D2A:  INCFSZ x90,W
0D2C:  SUBWF  x94,F
0D2E:  MOVF   x91,W
0D30:  BTFSS  FD8.0
0D32:  INCFSZ x91,W
0D34:  SUBWF  x95,F
0D36:  BSF    FD8.0
0D38:  RLCF   00,F
0D3A:  RLCF   01,F
0D3C:  RLCF   02,F
0D3E:  RLCF   03,F
0D40:  DECFSZ x96,F
0D42:  BRA    0CF0
0D44:  MOVFF  92,FEF
0D48:  MOVFF  93,FEC
0D4C:  MOVFF  94,FEC
0D50:  MOVFF  95,FEC
0D54:  RETURN 0
0D56:  MOVF   FE9,W
0D58:  MOVWF  x81
0D5A:  MOVF   x80,W
0D5C:  MOVWF  x83
0D5E:  BZ    0D92
0D60:  MOVFF  7F,8C
0D64:  MOVFF  7E,8B
0D68:  MOVFF  7D,8A
0D6C:  MOVFF  7C,89
0D70:  CLRF   x90
0D72:  CLRF   x8F
0D74:  MOVLW  20
0D76:  MOVWF  x8E
0D78:  MOVLW  82
0D7A:  MOVWF  x8D
0D7C:  RCALL  0872
0D7E:  MOVFF  03,7F
0D82:  MOVFF  02,7E
0D86:  MOVFF  01,7D
0D8A:  MOVFF  00,7C
0D8E:  DECFSZ x83,F
0D90:  BRA    0D60
0D92:  MOVFF  7F,8C
0D96:  MOVFF  7E,8B
0D9A:  MOVFF  7D,8A
0D9E:  MOVFF  7C,89
0DA2:  RCALL  0C8A
0DA4:  MOVFF  03,7F
0DA8:  MOVFF  02,7E
0DAC:  MOVFF  01,7D
0DB0:  MOVFF  00,7C
0DB4:  BTFSS  x7F.7
0DB6:  BRA    0DD2
0DB8:  DECF   x81,F
0DBA:  BSF    x81.5
0DBC:  COMF   x7C,F
0DBE:  COMF   x7D,F
0DC0:  COMF   x7E,F
0DC2:  COMF   x7F,F
0DC4:  INCF   x7C,F
0DC6:  BTFSC  FD8.2
0DC8:  INCF   x7D,F
0DCA:  BTFSC  FD8.2
0DCC:  INCF   x7E,F
0DCE:  BTFSC  FD8.2
0DD0:  INCF   x7F,F
0DD2:  MOVLW  3B
0DD4:  MOVWF  x88
0DD6:  MOVLW  9A
0DD8:  MOVWF  x87
0DDA:  MOVLW  CA
0DDC:  MOVWF  x86
0DDE:  CLRF   x85
0DE0:  MOVLW  0A
0DE2:  MOVWF  x83
0DE4:  MOVF   x80,W
0DE6:  BTFSC  FD8.2
0DE8:  INCF   x81,F
0DEA:  BSF    FD8.1
0DEC:  CLRF   FEA
0DEE:  MOVLW  7C
0DF0:  MOVWF  FE9
0DF2:  MOVFF  7F,8D
0DF6:  MOVFF  7E,8C
0DFA:  MOVFF  7D,8B
0DFE:  MOVFF  7C,8A
0E02:  MOVFF  88,91
0E06:  MOVFF  87,90
0E0A:  MOVFF  86,8F
0E0E:  MOVFF  85,8E
0E12:  RCALL  0CC8
0E14:  MOVF   01,W
0E16:  MOVF   00,F
0E18:  BNZ   0E38
0E1A:  INCF   x80,W
0E1C:  SUBWF  x83,W
0E1E:  BZ    0E38
0E20:  MOVF   x81,W
0E22:  BZ    0E3C
0E24:  ANDLW  0F
0E26:  SUBWF  x83,W
0E28:  BZ    0E2C
0E2A:  BC    0E9A
0E2C:  BTFSC  x81.7
0E2E:  BRA    0E9A
0E30:  BTFSC  x81.6
0E32:  BRA    0E3C
0E34:  MOVLW  20
0E36:  BRA    0E92
0E38:  MOVLW  20
0E3A:  ANDWF  x81,F
0E3C:  BTFSS  x81.5
0E3E:  BRA    0E58
0E40:  BCF    x81.5
0E42:  MOVF   x80,W
0E44:  BTFSS  FD8.2
0E46:  DECF   x81,F
0E48:  MOVF   00,W
0E4A:  MOVWF  x81
0E4C:  MOVLW  2D
0E4E:  MOVWF  x89
0E50:  RCALL  0C28
0E52:  MOVF   x81,W
0E54:  MOVWF  00
0E56:  CLRF   x81
0E58:  MOVF   x80,W
0E5A:  SUBWF  x83,W
0E5C:  BNZ   0E72
0E5E:  MOVF   00,W
0E60:  MOVWF  x81
0E62:  MOVLW  2E
0E64:  MOVWF  x89
0E66:  RCALL  0C28
0E68:  MOVF   x81,W
0E6A:  MOVWF  00
0E6C:  MOVLW  20
0E6E:  ANDWF  x81,F
0E70:  MOVLW  00
0E72:  MOVLW  30
0E74:  BTFSS  x81.5
0E76:  BRA    0E92
0E78:  BCF    x81.5
0E7A:  MOVF   x80,W
0E7C:  BTFSS  FD8.2
0E7E:  DECF   x81,F
0E80:  MOVF   00,W
0E82:  MOVWF  x81
0E84:  MOVLW  2D
0E86:  MOVWF  x89
0E88:  RCALL  0C28
0E8A:  MOVF   x81,W
0E8C:  MOVWF  00
0E8E:  CLRF   x81
0E90:  MOVLW  30
0E92:  ADDWF  00,F
0E94:  MOVFF  00,89
0E98:  RCALL  0C28
0E9A:  BCF    FD8.1
0E9C:  MOVFF  88,8D
0EA0:  MOVFF  87,8C
0EA4:  MOVFF  86,8B
0EA8:  MOVFF  85,8A
0EAC:  CLRF   x91
0EAE:  CLRF   x90
0EB0:  CLRF   x8F
0EB2:  MOVLW  0A
0EB4:  MOVWF  x8E
0EB6:  RCALL  0CC8
0EB8:  MOVFF  03,88
0EBC:  MOVFF  02,87
0EC0:  MOVFF  01,86
0EC4:  MOVFF  00,85
0EC8:  DECFSZ x83,F
0ECA:  BRA    0DEA
0ECC:  RETURN 0
0ECE:  MOVF   x83,W
0ED0:  CLRF   01
0ED2:  SUBWF  x82,W
0ED4:  BC    0EDC
0ED6:  MOVFF  82,00
0EDA:  BRA    0EF4
0EDC:  CLRF   00
0EDE:  MOVLW  08
0EE0:  MOVWF  x84
0EE2:  RLCF   x82,F
0EE4:  RLCF   00,F
0EE6:  MOVF   x83,W
0EE8:  SUBWF  00,W
0EEA:  BTFSC  FD8.0
0EEC:  MOVWF  00
0EEE:  RLCF   01,F
0EF0:  DECFSZ x84,F
0EF2:  BRA    0EE2
0EF4:  RETURN 0
0EF6:  MOVF   01,W
0EF8:  MOVFF  7C,82
0EFC:  MOVLW  64
0EFE:  MOVWF  x83
0F00:  RCALL  0ECE
0F02:  MOVFF  00,7C
0F06:  MOVF   01,W
0F08:  MOVLW  30
0F0A:  BNZ   0F1A
0F0C:  BTFSS  x7D.1
0F0E:  BRA    0F28
0F10:  BTFSC  x7D.3
0F12:  BRA    0F28
0F14:  BTFSC  x7D.4
0F16:  MOVLW  20
0F18:  BRA    0F20
0F1A:  BCF    x7D.3
0F1C:  BCF    x7D.4
0F1E:  BSF    x7D.0
0F20:  ADDWF  01,F
0F22:  MOVFF  01,89
0F26:  RCALL  0C28
0F28:  MOVFF  7C,82
0F2C:  MOVLW  0A
0F2E:  MOVWF  x83
0F30:  RCALL  0ECE
0F32:  MOVFF  00,7C
0F36:  MOVF   01,W
0F38:  MOVLW  30
0F3A:  BNZ   0F48
0F3C:  BTFSC  x7D.3
0F3E:  BRA    0F50
0F40:  BTFSS  x7D.0
0F42:  BRA    0F50
0F44:  BTFSC  x7D.4
0F46:  MOVLW  20
0F48:  ADDWF  01,F
0F4A:  MOVFF  01,89
0F4E:  RCALL  0C28
0F50:  MOVLW  30
0F52:  ADDWF  x7C,F
0F54:  MOVFF  7C,89
0F58:  RCALL  0C28
0F5A:  RETURN 0
0F5C:  MOVFF  7D,84
0F60:  MOVF   x81,W
0F62:  XORWF  x84,F
0F64:  BTFSS  x84.7
0F66:  BRA    0F72
0F68:  BCF    FD8.2
0F6A:  BCF    FD8.0
0F6C:  BTFSC  x7D.7
0F6E:  BSF    FD8.0
0F70:  BRA    0FD0
0F72:  MOVFF  7D,84
0F76:  MOVFF  80,85
0F7A:  MOVF   x7C,W
0F7C:  SUBWF  x85,F
0F7E:  BZ    0F8C
0F80:  BTFSS  x84.7
0F82:  BRA    0FD0
0F84:  MOVF   FD8,W
0F86:  XORLW  01
0F88:  MOVWF  FD8
0F8A:  BRA    0FD0
0F8C:  MOVFF  81,85
0F90:  MOVF   x7D,W
0F92:  SUBWF  x85,F
0F94:  BZ    0FA2
0F96:  BTFSS  x84.7
0F98:  BRA    0FD0
0F9A:  MOVF   FD8,W
0F9C:  XORLW  01
0F9E:  MOVWF  FD8
0FA0:  BRA    0FD0
0FA2:  MOVFF  82,85
0FA6:  MOVF   x7E,W
0FA8:  SUBWF  x85,F
0FAA:  BZ    0FB8
0FAC:  BTFSS  x84.7
0FAE:  BRA    0FD0
0FB0:  MOVF   FD8,W
0FB2:  XORLW  01
0FB4:  MOVWF  FD8
0FB6:  BRA    0FD0
0FB8:  MOVFF  83,85
0FBC:  MOVF   x7F,W
0FBE:  SUBWF  x85,F
0FC0:  BZ    0FCE
0FC2:  BTFSS  x84.7
0FC4:  BRA    0FD0
0FC6:  MOVF   FD8,W
0FC8:  XORLW  01
0FCA:  MOVWF  FD8
0FCC:  BRA    0FD0
0FCE:  BCF    FD8.0
0FD0:  RETURN 0
0FD2:  TBLRD*+
0FD4:  MOVFF  FF6,7D
0FD8:  MOVFF  FF7,7E
0FDC:  MOVFF  FF5,89
0FE0:  RCALL  0C28
0FE2:  MOVFF  7D,FF6
0FE6:  MOVFF  7E,FF7
0FEA:  DECFSZ x7C,F
0FEC:  BRA    0FD2
0FEE:  RETURN 0
*
11D2:  MOVF   FE9,W
11D4:  MOVWF  x81
11D6:  MOVF   x80,W
11D8:  MOVWF  x83
11DA:  BZ    1210
11DC:  MOVFF  7F,8C
11E0:  MOVFF  7E,8B
11E4:  MOVFF  7D,8A
11E8:  MOVFF  7C,89
11EC:  CLRF   x90
11EE:  CLRF   x8F
11F0:  MOVLW  20
11F2:  MOVWF  x8E
11F4:  MOVLW  82
11F6:  MOVWF  x8D
11F8:  CALL   0872
11FC:  MOVFF  03,7F
1200:  MOVFF  02,7E
1204:  MOVFF  01,7D
1208:  MOVFF  00,7C
120C:  DECFSZ x83,F
120E:  BRA    11DC
1210:  MOVFF  7F,8C
1214:  MOVFF  7E,8B
1218:  MOVFF  7D,8A
121C:  MOVFF  7C,89
1220:  RCALL  0C8A
1222:  MOVFF  03,7F
1226:  MOVFF  02,7E
122A:  MOVFF  01,7D
122E:  MOVFF  00,7C
1232:  BTFSS  x7F.7
1234:  BRA    1250
1236:  DECF   x81,F
1238:  BSF    x81.5
123A:  COMF   x7C,F
123C:  COMF   x7D,F
123E:  COMF   x7E,F
1240:  COMF   x7F,F
1242:  INCF   x7C,F
1244:  BTFSC  FD8.2
1246:  INCF   x7D,F
1248:  BTFSC  FD8.2
124A:  INCF   x7E,F
124C:  BTFSC  FD8.2
124E:  INCF   x7F,F
1250:  MOVLW  3B
1252:  MOVWF  x88
1254:  MOVLW  9A
1256:  MOVWF  x87
1258:  MOVLW  CA
125A:  MOVWF  x86
125C:  CLRF   x85
125E:  MOVLW  0A
1260:  MOVWF  x83
1262:  MOVF   x80,W
1264:  BTFSC  FD8.2
1266:  INCF   x81,F
1268:  BSF    FD8.1
126A:  CLRF   FEA
126C:  MOVLW  7C
126E:  MOVWF  FE9
1270:  MOVFF  7F,8D
1274:  MOVFF  7E,8C
1278:  MOVFF  7D,8B
127C:  MOVFF  7C,8A
1280:  MOVFF  88,91
1284:  MOVFF  87,90
1288:  MOVFF  86,8F
128C:  MOVFF  85,8E
1290:  RCALL  0CC8
1292:  MOVF   01,W
1294:  MOVF   00,F
1296:  BNZ   12B6
1298:  INCF   x80,W
129A:  SUBWF  x83,W
129C:  BZ    12B6
129E:  MOVF   x81,W
12A0:  BZ    12BA
12A2:  ANDLW  0F
12A4:  SUBWF  x83,W
12A6:  BZ    12AA
12A8:  BC    1320
12AA:  BTFSC  x81.7
12AC:  BRA    1320
12AE:  BTFSC  x81.6
12B0:  BRA    12BA
12B2:  MOVLW  20
12B4:  BRA    1316
12B6:  MOVLW  20
12B8:  ANDWF  x81,F
12BA:  BTFSS  x81.5
12BC:  BRA    12D8
12BE:  BCF    x81.5
12C0:  MOVF   x80,W
12C2:  BTFSS  FD8.2
12C4:  DECF   x81,F
12C6:  MOVF   00,W
12C8:  MOVWF  x81
12CA:  MOVLW  2D
12CC:  BTFSS  F9E.4
12CE:  BRA    12CC
12D0:  MOVWF  FAD
12D2:  MOVF   x81,W
12D4:  MOVWF  00
12D6:  CLRF   x81
12D8:  MOVF   x80,W
12DA:  SUBWF  x83,W
12DC:  BNZ   12F4
12DE:  MOVF   00,W
12E0:  MOVWF  x81
12E2:  MOVLW  2E
12E4:  BTFSS  F9E.4
12E6:  BRA    12E4
12E8:  MOVWF  FAD
12EA:  MOVF   x81,W
12EC:  MOVWF  00
12EE:  MOVLW  20
12F0:  ANDWF  x81,F
12F2:  MOVLW  00
12F4:  MOVLW  30
12F6:  BTFSS  x81.5
12F8:  BRA    1316
12FA:  BCF    x81.5
12FC:  MOVF   x80,W
12FE:  BTFSS  FD8.2
1300:  DECF   x81,F
1302:  MOVF   00,W
1304:  MOVWF  x81
1306:  MOVLW  2D
1308:  BTFSS  F9E.4
130A:  BRA    1308
130C:  MOVWF  FAD
130E:  MOVF   x81,W
1310:  MOVWF  00
1312:  CLRF   x81
1314:  MOVLW  30
1316:  ADDWF  00,F
1318:  MOVF   00,W
131A:  BTFSS  F9E.4
131C:  BRA    131A
131E:  MOVWF  FAD
1320:  BCF    FD8.1
1322:  MOVFF  88,8D
1326:  MOVFF  87,8C
132A:  MOVFF  86,8B
132E:  MOVFF  85,8A
1332:  CLRF   x91
1334:  CLRF   x90
1336:  CLRF   x8F
1338:  MOVLW  0A
133A:  MOVWF  x8E
133C:  RCALL  0CC8
133E:  MOVFF  03,88
1342:  MOVFF  02,87
1346:  MOVFF  01,86
134A:  MOVFF  00,85
134E:  DECFSZ x83,F
1350:  BRA    1268
1352:  RETURN 0
1354:  MOVF   01,W
1356:  MOVFF  80,82
135A:  MOVLW  64
135C:  MOVWF  x83
135E:  RCALL  0ECE
1360:  MOVFF  00,80
1364:  MOVF   01,W
1366:  MOVLW  30
1368:  BNZ   1378
136A:  BTFSS  x81.1
136C:  BRA    1388
136E:  BTFSC  x81.3
1370:  BRA    1388
1372:  BTFSC  x81.4
1374:  MOVLW  20
1376:  BRA    137E
1378:  BCF    x81.3
137A:  BCF    x81.4
137C:  BSF    x81.0
137E:  ADDWF  01,F
1380:  MOVF   01,W
1382:  BTFSS  F9E.4
1384:  BRA    1382
1386:  MOVWF  FAD
1388:  MOVFF  80,82
138C:  MOVLW  0A
138E:  MOVWF  x83
1390:  RCALL  0ECE
1392:  MOVFF  00,80
1396:  MOVF   01,W
1398:  MOVLW  30
139A:  BNZ   13A8
139C:  BTFSC  x81.3
139E:  BRA    13B2
13A0:  BTFSS  x81.0
13A2:  BRA    13B2
13A4:  BTFSC  x81.4
13A6:  MOVLW  20
13A8:  ADDWF  01,F
13AA:  MOVF   01,W
13AC:  BTFSS  F9E.4
13AE:  BRA    13AC
13B0:  MOVWF  FAD
13B2:  MOVLW  30
13B4:  ADDWF  x80,F
13B6:  MOVF   x80,W
13B8:  BTFSS  F9E.4
13BA:  BRA    13B8
13BC:  MOVWF  FAD
13BE:  RETURN 0
13C0:  MOVF   FE9,W
13C2:  MOVWF  x82
13C4:  MOVLW  3B
13C6:  MOVWF  x89
13C8:  MOVLW  9A
13CA:  MOVWF  x88
13CC:  MOVLW  CA
13CE:  MOVWF  x87
13D0:  CLRF   x86
13D2:  MOVLW  0A
13D4:  MOVWF  x84
13D6:  BSF    FD8.1
13D8:  CLRF   FEA
13DA:  MOVLW  7E
13DC:  MOVWF  FE9
13DE:  MOVFF  81,8D
13E2:  MOVFF  80,8C
13E6:  MOVFF  7F,8B
13EA:  MOVFF  7E,8A
13EE:  MOVFF  89,91
13F2:  MOVFF  88,90
13F6:  MOVFF  87,8F
13FA:  MOVFF  86,8E
13FE:  RCALL  0CC8
1400:  MOVF   01,W
1402:  MOVF   00,F
1404:  BNZ   1424
1406:  MOVF   x84,W
1408:  XORLW  01
140A:  BZ    1424
140C:  MOVF   x82,W
140E:  BZ    1426
1410:  ANDLW  0F
1412:  SUBWF  x84,W
1414:  BZ    1418
1416:  BC    1432
1418:  BTFSC  x82.7
141A:  BRA    1432
141C:  BTFSC  x82.6
141E:  BRA    1426
1420:  MOVLW  20
1422:  BRA    1428
1424:  CLRF   x82
1426:  MOVLW  30
1428:  ADDWF  00,F
142A:  MOVF   00,W
142C:  BTFSS  F9E.4
142E:  BRA    142C
1430:  MOVWF  FAD
1432:  BCF    FD8.1
1434:  MOVFF  89,8D
1438:  MOVFF  88,8C
143C:  MOVFF  87,8B
1440:  MOVFF  86,8A
1444:  CLRF   x91
1446:  CLRF   x90
1448:  CLRF   x8F
144A:  MOVLW  0A
144C:  MOVWF  x8E
144E:  RCALL  0CC8
1450:  MOVFF  03,89
1454:  MOVFF  02,88
1458:  MOVFF  01,87
145C:  MOVFF  00,86
1460:  DECFSZ x84,F
1462:  BRA    13D6
1464:  GOTO   2374 (RETURN)
*
24B8:  ADDWF  FE8,W
24BA:  CLRF   FF7
24BC:  RLCF   FF7,F
24BE:  ADDLW  D3
24C0:  MOVWF  FF6
24C2:  MOVLW  24
24C4:  ADDWFC FF7,F
24C6:  TBLRD*-
24C8:  MOVF   FF5,W
24CA:  MOVWF  FFA
24CC:  TBLRD*
24CE:  MOVF   FF5,W
24D0:  MOVWF  FF9
24D2:  DATA CA,15
24D4:  DATA 9E,19
24D6:  DATA 36,1A
24D8:  DATA CE,1A
24DA:  DATA 8C,1B
24DC:  DATA 24,1C
24DE:  DATA E4,1C
24E0:  DATA EC,1D
24E2:  DATA F0,1E
24E4:  DATA 58,1F
....................  
.................... #list 
....................  
.................... //#include <18F248.h> 
.................... #fuses HS,NOPROTECT,NOLVP,NOWDT //#fuses XT,NOWDT,NOPROTECT,NOLVP,PUT,BROWNOUT 
.................... #device 18F2480*=16, ADC=8 // ADC 10 bits 
.................... //#device HIGH_INTS=true 
.................... #use delay(clock=20000000) 
*
06D2:  CLRF   FEA
06D4:  MOVLW  90
06D6:  MOVWF  FE9
06D8:  MOVF   FEF,W
06DA:  BZ    06F6
06DC:  MOVLW  06
06DE:  MOVWF  01
06E0:  CLRF   00
06E2:  DECFSZ 00,F
06E4:  BRA    06E2
06E6:  DECFSZ 01,F
06E8:  BRA    06E0
06EA:  MOVLW  7B
06EC:  MOVWF  00
06EE:  DECFSZ 00,F
06F0:  BRA    06EE
06F2:  DECFSZ FEF,F
06F4:  BRA    06DC
06F6:  RETURN 0
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #use fast_io(c) 
.................... #include <can-18xxx8.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.c                             //// 
.................... //// CAN Library routines for Microchip's PIC18Cxx8 and 18Fxx8 line  //// 
.................... ////                                                                 //// 
.................... //// This library provides the following functions:                  //// 
.................... ////  (for more information on these functions see the comment       //// 
.................... ////   header above each function)                                   //// 
.................... ////                                                                 //// 
.................... ////    can_init - Configures the PIC18xxx8 CAN peripheral           //// 
.................... ////                                                                 //// 
.................... ////    can_set_baud - Sets the baud rate control registers          //// 
.................... ////                                                                 //// 
.................... ////    can_set_mode - Sets the CAN module into a specific mode      //// 
.................... ////                                                                 //// 
.................... ////    can_set_id - Sets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_get_id - Gets the standard and extended ID               //// 
.................... ////                                                                 //// 
.................... ////    can_putd - Sends a message/request with specified ID         //// 
.................... ////                                                                 //// 
.................... ////    can_getd - Returns specified message/request and ID           //// 
.................... ////                                                                 //// 
.................... ////    can_kbhit - Returns true if there is data in one of the      //// 
.................... ////                receive buffers                                  //// 
.................... ////                                                                 //// 
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    //// 
.................... ////              send more data                                     //// 
.................... ////                                                                 //// 
.................... ////    can_abort - Aborts all pending transmissions                 //// 
.................... ////                                                                 //// 
.................... //// PIN_B3 is CANRX, and PIN_B2 is CANTX.  You will need a CAN      //// 
.................... //// transceiver to connect these pins to CANH and CANL bus lines.    //// 
.................... ////                                                                 //// 
.................... //// CCS provides an example, ex_can.c, which shows how to use this  //// 
.................... //// library.                                                        //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History                                                 //// 
.................... ////                                                                 //// 
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     //// 
.................... ////              setting all RX filters to extended.                //// 
.................... ////                                                                 //// 
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 //// 
.................... ////                                                                 //// 
.................... ////  Mar 30 09 - added CANTX2 code for PIC18F6585/8585/6680/8680    //// 
.................... ////                                                                 //// 
.................... ////  May 18 10 - changed variable types to unsigned incase compiled //// 
.................... ////              with #device ANSI, which makes variables signed    //// 
.................... ////                                                                 //// 
.................... ////  Apr 20 11 - updated for new PIC18FxxK80 chips                  //// 
.................... ////                                                                 //// 
.................... ////  Jan 10 13 - updated can_init() function to setup correct tris  //// 
.................... ////              register for PIC being used.                       //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2013 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <can-18xxx8.h> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                        can-18xxx8.h                             //// 
.................... ////                                                                 //// 
.................... //// Prototypes, definitions, defines and macros used for and with   //// 
.................... //// the CCS CAN library for PIC18Fxx8 and PIC18Cxx8.                //// 
.................... ////                                                                 //// 
.................... //// (see can-18xxx8.c)                                              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2013 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __CCS_CAN18xxx8_LIB_DEFINES__ 
.................... #define __CCS_CAN18xxx8_LIB_DEFINES__ 
....................  
.................... #ifndef CAN_DO_DEBUG 
....................  #define CAN_DO_DEBUG FALSE 
.................... #endif 
....................  
.................... #IFNDEF CAN_USE_EXTENDED_ID 
....................   #define CAN_USE_EXTENDED_ID         TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH 
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq) 
.................... #ENDIF 
....................  
.................... #IFNDEF CAN_BRG_PRESCALAR 
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc ) 
.................... #ENDIF 
....................  
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS 
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_SAM 
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1 
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PROPAGATION_TIME 
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_WAKE_FILTER 
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit 
.................... #endif 
....................  
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2 
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq) 
.................... #endif 
....................  
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER 
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_DRIVE_HIGH 
....................  #define CAN_ENABLE_DRIVE_HIGH 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CAN_CAPTURE 
....................  #define CAN_ENABLE_CAN_CAPTURE 0 
.................... #endif 
....................  
.................... #ifndef CAN_ENABLE_CANTX2           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_ENABLE_CANTX2 0      // 0 CANTX2 disabled, 1 CANTX2 enabled 
.................... #endif 
....................  
.................... #ifndef CAN_CANTX2_SOURCE           // added 03/30/09 for PIC18F6585/8585/6680/8680 
....................    #define CAN_CANTX2_SOURCE 0      // 0 source is invert of CANTX1, 1 source is CAN Clock 
.................... #endif 
....................  
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_DISABLE=1, CAN_OP_NORMAL=0}; 
.................... enum CAN_WIN_ADDRESS {CAN_WIN_RX0=0, CAN_WIN_RX1=5, CAN_WIN_TX0=4, CAN_WIN_TX1=3, CAN_WIN_TX2=2}; 
....................  
.................... //can control 
.................... struct { 
....................    int1 void0; //0 
....................    CAN_WIN_ADDRESS win:3;   //1:3 //window address bits 
....................    int1 abat;   //4 //abort all pending transmissions 
....................    CAN_OP_MODE reqop:3;   //5:7   //request can operation mode bits 
.................... } CANCON; 
.................... #byte CANCON = getenv("SFR:CANCON")   //0xF6F 
....................  
....................  
.................... enum CAN_INT_CODE {CAN_INT_WAKEUP=7, CAN_INT_RX0=6, CAN_INT_RX1=5, CAN_INT_TX0=4, CAN_INT_TX1=3, CAN_INT_TX2=2, CAN_INT_ERROR=1, CAN_INT_NO=0}; 
....................  
.................... //can status register READ-ONLY 
.................... struct { 
....................    int1 void0;   //0 
....................    CAN_INT_CODE icode:3;   //1:3   //interrupt code 
....................    int1 void4;   //4 
....................    CAN_OP_MODE opmode:3;   //5:7   //operation mode status 
.................... } CANSTAT; 
.................... #byte CANSTAT = getenv("SFR:CANSTAT")   //0xF6E 
....................  
.................... //communication status register READ-ONLY 
.................... struct { 
....................    int1 ewarn;      //0 //error warning 
....................    int1 rxwarn;      //1 //receiver warning 
....................    int1 txwarn;      //2 //transmitter warning 
....................    int1 rxbp;   //3 //receiver bus passive 
....................    int1 txbp;   //4 //transmitter bus passive bit 
....................    int1 txbo;   //5   //transmitter bus off 
....................    int1 rx1ovfl;   //6   //receive buffer 1 overflow 
....................    int1 rx0ovfl;   //7   //receive buffer 0 overflow 
.................... } COMSTAT; 
.................... #byte COMSTAT= getenv("SFR:COMSTAT") //0xF74 
....................  
.................... //baud rate control register 1 
.................... struct { 
....................    int brp:6;   //0:5   //baud rate prescalar 
....................    int sjw:2;   //6:7   //synchronized jump width 
.................... } BRGCON1; 
.................... #byte BRGCON1 = getenv("SFR:BRGCON1")   //0xF70 
....................  
.................... //baud rate control register 2 
.................... struct { 
....................    int prseg:3; //0:2 //propagation time select 
....................    int seg1ph:3; //3:5 //phase segment 1 
....................    int1 sam; //6 //sample of the can bus line 
....................    int1 seg2phts; //7 //phase segment 2 time select 
.................... } BRGCON2; 
.................... #byte BRGCON2 = getenv("SFR:BRGCON2")   //0xF71 
....................  
.................... //baud rate control register 3 
.................... struct { 
....................    int seg2ph:3;   //0:2   //phase segment 2 time select 
....................    int void543:3;   //3:5 
....................    int1 wakfil;   //6 //selects can bus line filter for wake-up 
....................    int1 void7;   //7 
.................... } BRGCON3; 
.................... #byte BRGCON3 = getenv("SFR:BRGCON3")   //0xF72 
....................  
.................... //can i/o control register 
.................... struct { 
....................    int void3210:4;   //0:3 
....................    int1 cancap;   //4 //can message receive capture 
....................    int1 endrhi;   //5 //enable drive high 
....................    int1 tx2en;    //6   //CANTX2 Pin Enable bit       //added 3/30/09 for PIC18F6585/8585/6680/8680 
....................    int1 tx2src;   //7   //CANTX2 Pin Data Source bit  //added 3/30/09 for PIC18F6585/8585/6680/8680 
.................... } CIOCON; 
.................... #byte CIOCON = getenv("SFR:CIOCON")    //0xF73 
....................  
.................... //transmit buffer n control register 
.................... struct txbNcon_struct { 
....................    int  txpri:2;   //0:1   //transmit priority bits 
....................    int1 void2; //2 
....................    int1 txreq;   //3   //transmit request status (clear to request message abort) 
....................    int1 txerr;   //4   //transmission error detected 
....................    int1 txlarb;   //5   //transmission lost arbitration status 
....................    int1 txabt;   //6   //transmission aborted status 
....................    int1 void7; 
.................... }; 
.................... struct txbNcon_struct TXB0CON; 
.................... struct txbNcon_struct TXB1CON; 
.................... struct txbNcon_struct TXB2CON; 
.................... struct txbNcon_struct TXBaCON; 
.................... #byte   TXB0CON = getenv("SFR:TXB0CON")      //0xF40 
.................... #byte   TXB1CON = getenv("SFR:TXB1CON")      //0xF30 
.................... #byte   TXB2CON = getenv("SFR:TXB2CON")      //0xF20 
.................... #byte TXBaCON =     0xF60             // txbXcon when in the access bank 
....................  
....................  
.................... //transmit buffer n standard identifier 
.................... #byte TXB0SIDH = getenv("SFR:TXB0SIDH")      // 
.................... #byte TXB0SIDL = getenv("SFR:TXB0SIDL")      // 
.................... #byte TXB1SIDH = getenv("SFR:TXB1SIDH")      // 
.................... #byte TXB1SIDL = getenv("SFR:TXB1SIDL")      // 
.................... #byte TXB2SIDH = getenv("SFR:TXB2SIDH")      // 
.................... #byte TXB2SIDL = getenv("SFR:TXB2SIDL")      // 
....................  
.................... //transmit buffer n extended identifier 
.................... #byte TXB0EIDH = getenv("SFR:TXB0EIDH")      //0xF43 
.................... #byte TXB0EIDL = getenv("SFR:TXB0EIDL")      //0xF44 
.................... #byte TXB1EIDH = getenv("SFR:TXB1EIDH")      //0xF33 
.................... #byte TXB1EIDL = getenv("SFR:TXB1EIDL")      //0xF34 
.................... #byte TXB2EIDH = getenv("SFR:TXB2EIDH")      //0xF23 
.................... #byte TXB2EIDL = getenv("SFR:TXB2EIDL")      //0xF24 
....................  
.................... #define RX0MASK      getenv("SFR:RXM0EIDL")     //0xF1B    //rxm0eidl 
.................... #define RX1MASK      getenv("SFR:RXM1EIDL")     //0xF1F    //rxm1eidl 
.................... #define RX0FILTER0   getenv("SFR:RXF0EIDL")     //0xF03    //rxf0eidl 
.................... #define RX0FILTER1   getenv("SFR:RXF1EIDL")     //0xF07    //rxf1eidl 
.................... #define RX1FILTER2   getenv("SFR:RXF2EIDL")     //0xF0B    //rxf2eidl 
.................... #define RX1FILTER3   getenv("SFR:RXF3EIDL")     //0xF0F    //rxf3eidl 
.................... #define RX1FILTER4   getenv("SFR:RXF4EIDL")     //0xF13    //rxf4eidl 
.................... #define RX1FILTER5   getenv("SFR:RXF5EIDL")     //0xF17    //rxf5eidl 
.................... #define RXB0ID       getenv("SFR:RXB0EIDL")     //0xF64    //rxb0eidl 
.................... #define RXB1ID       getenv("SFR:RXB1EIDL")     //0xF54    //rxb1eidl 
.................... #define TXB0ID       getenv("SFR:TXB0EIDL")     //0xF44    //txb0eidl 
.................... #define TXB1ID       getenv("SFR:TXB1EIDL")     //0xF34    //txb1eidl 
.................... #define TXB2ID       getenv("SFR:TXB2EIDL")     //0xF24    //tsb2eidl 
.................... #define TXRXBaID     0xF64 
....................  
.................... //transmit buffer n data byte m 
.................... #byte TXB0D0 = getenv("SFR:TXB0D0")       //0xF46 
.................... #byte TXB0D7 = getenv("SFR:TXB0D7")       //0xF4D 
.................... #byte TXB1D0 = getenv("SFR:TXB1D0")       //0xF36 
.................... #byte TXB1D7 = getenv("SFR:TXB1D7")       //0xF3D 
.................... #byte TXB2D0 = getenv("SFR:TXB2D0")       //0xF26 
.................... #byte TXB2D7 = getenv("SFR:TXB2D7")       //0xF2D 
....................  
.................... //transmit buffer n data length 
.................... struct txbNdlc_struct { 
....................    int dlc:4;   //0:3 
....................    int void54:2; //4:5 
....................    int1 rtr; //6 //transmission frame remote transmission 
....................    int1 void7; //7 
.................... }; 
.................... struct txbNdlc_struct TXB0DLC; 
.................... struct txbNdlc_struct TXB1DLC; 
.................... struct txbNdlc_struct TXB2DLC; 
.................... struct txbNdlc_struct TXBaDLC; 
.................... #byte TXB0DLC = getenv("SFR:TXB0DLC")     //0xF45 
.................... #byte TXB1DLC = getenv("SFR:TXB1DLC")     //0xF35 
.................... #byte TXB2DLC = getenv("SFR:TXB2DLC")     //0xF25 
.................... #byte TXBaDLC = 0xF65  //txbXdlc when in the access bank 
....................  
....................  
.................... //transmit error count register 
.................... #byte TXERRCNT=getenv("SFR:TXERRCNT")     //0xF76 
....................  
....................  
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0}; 
....................  
.................... //receive buffer 0 control register 
.................... struct { 
....................    int1 filthit0;   //0 //filter hit 
....................    int1 jtoff;   //1 //jump table offset 
....................    int1 rxb0dben;   //2 //receive buffer 0 double buffer enable 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receiver buffer mode 
....................    int1 rxful;   //7 //receive full status 
.................... } RXB0CON; 
.................... #byte RXB0CON = getenv("SFR:RXB0CON")     //0xF60 
....................  
.................... //receive buffer 1 control register 
.................... struct { 
....................    int filthit:3;   //0:2 
....................    int1 rxrtrro;   //3 //receive remote transfer request 
....................    int1 void4;   //4 
....................    CAN_RX_MODE rxm:2;   //5:6 //receive buffer mode 
....................    int1 rxful;   //7   //receive full 
.................... } RXB1CON; 
.................... #byte   RXB1CON = getenv("SFR:RXB1CON")     //0xF50 
....................  
....................  
.................... //receive buffer n standard identifier 
.................... #byte   RXB0SIDH = getenv("SFR:RXB0SIDH")    //0xF61 
.................... #byte   RXB0SIDL = getenv("SFR:RXB0SIDL")    //0xF62 
.................... #byte   RXB1SIDH = getenv("SFR:RXB1SIDH")    //0xF51 
.................... #byte   RXB1SIDL = getenv("SFR:RXB1SIDL")    //0xF52 
....................  
.................... //receive buffer n extended identifier 
.................... #byte   RXB0EIDH = getenv("SFR:RXB0EIDH")    //0xF63 
.................... #byte   RXB0EIDL = getenv("SFR:RXB0EIDL")    //0xF64 
.................... #byte   RXB1EIDH = getenv("SFR:RXB1EIDH")    //0xF53 
.................... #byte   RXB1EIDL = getenv("SFR:RXB1EIDL")    //0xF54 
....................  
.................... #byte TXRXBaEIDL=0xF64 
....................  
.................... struct { 
....................    int void012:3; //0:3 
....................    int1 ext;   //extended id 
....................    int1 srr;   //substitute remove request bit 
....................    int void567:3; //5:7 
.................... } TXRXBaSIDL; 
.................... #byte TXRXBaSIDL=0xF62 
....................  
.................... //receive buffer n data length code register 
.................... struct rxbNdlc_struct { 
....................    int dlc:4;   //0:3 //data length code 
....................    int1 rb0; //4 //reserved 
....................    int1 rb1;   //5 //reserved 
....................    int1 rtr;   //6 //receiver remote transmission request bit 
....................    int1 void7;   //7 
.................... }; 
.................... struct rxbNdlc_struct RXB0DLC; 
.................... struct rxbNdlc_struct RXB1DLC; 
.................... struct rxbNdlc_struct RXBaDLC; 
.................... #byte   RXB0DLC = getenv("SFR:RXB0DLC")      //0xF65 
.................... #byte   RXB1DLC = getenv("SFR:RXB1DLC")      //0xF55 
.................... #byte   RXBaDLC = getenv("SFR:RXB0DLC")      //0xF65 
.................... //receive buffer n data field byte m register 
.................... #byte RXB0D0 = getenv("SFR:RXB0D0")    //0xF66 
.................... #byte RXB0D7 = getenv("SFR:RXB0D7")    //0xF6D 
.................... #byte TXRXBaD0=0xF66 
.................... #byte TXRXBaD7=0xF6D 
....................  
.................... //receive error count 
.................... #byte RXERRCNT = getenv("SFR:RXERRCNT")      //0xF75 
....................  
.................... //receive acceptance filter n standard identifier 
.................... #byte RXF0SIDH = getenv("SFR:RXF0SIDH")      //0xF00 
.................... #byte RXF0SIDL = getenv("SFR:RXF0SIDL")      //0xF01 
.................... #byte RXF1SIDH = getenv("SFR:RXF1SIDH")      //0xF04 
.................... #byte RXF1SIDL = getenv("SFR:RXF1SIDL")      //0xF05 
.................... #byte RXF2SIDH = getenv("SFR:RXF2SIDH")      //0xF08 
.................... #byte RXF2SIDL = getenv("SFR:RXF2SIDL")      //0xF09 
.................... #byte RXF3SIDH = getenv("SFR:RXF3SIDH")      //0xF0C 
.................... #byte RXF3SIDL = getenv("SFR:RXF3SIDL")      //0xF0D 
.................... #byte RXF4SIDH = getenv("SFR:RXF4SIDH")      //0xF10 
.................... #byte RXF4SIDL = getenv("SFR:RXF4SIDL")      //0xF11 
.................... #byte RXF5SIDH = getenv("SFR:RXF5SIDH")      //0xF14 
.................... #byte RXF5SIDL = getenv("SFR:RXF5SIDL")      //0xF15 
....................  
.................... //receive acceptance filter n extended identifier 
.................... #byte RXF0EIDH = getenv("SFR:RXF0EIDH")      //0xF02 
.................... #byte RXF0EIDL = getenv("SFR:RXF0EIDL")      //0xF03 
.................... #byte RXF1EIDH = getenv("SFR:RXF1EIDH")      //0xF06 
.................... #byte RXF1EIDL = getenv("SFR:RXF1EIDL")      //0xF07 
.................... #byte RXF2EIDH = getenv("SFR:RXF2EIDH")      //0xF0A 
.................... #byte RXF2EIDL = getenv("SFR:RXF2EIDL")      //0xF0B 
.................... #byte RXF3EIDH = getenv("SFR:RXF3EIDH")      //0xF0E 
.................... #byte RXF3EIDL = getenv("SFR:RXF3EIDL")      //0xF0F 
.................... #byte RXF4EIDH = getenv("SFR:RXF4EIDH")      //0xF12 
.................... #byte RXF4EIDL = getenv("SFR:RXF4EIDL")      //0xF13 
.................... #byte RXF5EIDH = getenv("SFR:RXF5EIDH")      //0xF16 
.................... #byte RXF5EIDL = getenv("SFR:RXF5EIDL")      //0xF17 
....................  
.................... //receive acceptance mask n standard identifier mask 
.................... #byte RXM0SIDH = getenv("SFR:RXM0SIDH")      //0xF18 
.................... #byte RXM0SIDL = getenv("SFR:RXM0SIDL")      //0xF19 
.................... #byte RXM1SIDH = getenv("SFR:RXM1SIDH")      //0xF1C 
.................... #byte RXM1SIDL = getenv("SFR:RXM1SIDL")      //0xF1D 
....................  
.................... //receive acceptance mask n extended identifier mask 
.................... #byte RXM0EIDH = getenv("SFR:RXM0EIDH")      //0xF1A 
.................... #byte RXM0EIDL = getenv("SFR:RXM0EIDL")      //0xF1B 
.................... #byte RXM1EIDH = getenv("SFR:RXM1EIDH")      //0xF1E 
.................... #byte RXM1EIDL = getenv("SFR:RXM1EIDL")      //0xF1F 
....................  
.................... //value to put in mask field to accept all incoming id's 
.................... #define CAN_MASK_ACCEPT_ALL   0 
....................  
.................... //can interrupt flags 
.................... #bit CAN_INT_IRXIF = getenv("BIT:IRXIF")     //0xFA4.7 
.................... #bit CAN_INT_WAKIF = getenv("BIT:WAKIF")     //0xFA4.6 
.................... #bit CAN_INT_ERRIF = getenv("BIT:ERRIF")     //0xFA4.5 
.................... #bit CAN_INT_TXB2IF = getenv("BIT:TXB2IF")   // 0xFA4.4 
.................... #bit CAN_INT_TXB1IF = getenv("BIT:TXB1IF")   // 0xFA4.3 
.................... #bit CAN_INT_TXB0IF = getenv("BIT:TXB0IF")   // 0xFA4.2 
.................... #bit CAN_INT_RXB1IF = getenv("BIT:RXB1IF")   // 0xFA4.1 
.................... #bit CAN_INT_RXB0IF = getenv("BIT:RXB0IF")   // 0xFA4.0 
....................  
.................... //PROTOTYPES 
....................  
.................... struct rx_stat { 
....................    int1 err_ovfl; 
....................    int filthit:3; 
....................    int1 buffer; 
....................    int1 rtr; 
....................    int1 ext; 
....................    int1 inv; 
.................... }; 
....................  
.................... void  can_init(void); 
.................... void  can_set_baud(void); 
.................... void  can_set_mode(CAN_OP_MODE mode); 
.................... void  can_set_id(unsigned int* addr, unsigned int32 id, int1 ext); 
.................... unsigned int32 can_get_id(unsigned int * addr, int1 ext); 
.................... int1  can_putd(unsigned int32 id, unsigned int * data, unsigned int len, unsigned int priority, int1 ext, int1 rtr); 
.................... int1  can_getd(unsigned int32 & id, unsigned int * data, unsigned int & len, struct rx_stat & stat); 
....................  
.................... #endif 
....................  
....................  
.................... #if CAN_DO_DEBUG 
....................  #define can_debug printf 
.................... #else 
....................  #define can_debug 
.................... #endif 
....................  
....................  
.................... //macros 
.................... #define can_kbhit()                 (RXB0CON.rxful || RXB1CON.rxful) 
.................... #define can_tbe()                   (!TXB0CON.txreq || !TXB1CON.txreq || !TXB2CON.txreq) 
.................... #define can_abort()                 (CANCON.abat=1) 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_init() 
.................... // 
.................... // Initializes PIC18xxx8 CAN peripheral.  Sets the RX filter and masks so the 
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers 
.................... // to only accept valid messages (as opposed to all messages, or all 
.................... // extended message, or all standard messages).  Also sets the tri-state 
.................... // setting of B2 to output, and B3 to input (apparently the CAN peripheral 
.................... // doesn't keep track of this) 
.................... // 
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH, 
.................... // CAN_ENABLE_CAN_CAPTURE) are given a default define in the can-18xxx8.h file. 
.................... // These default values can be overwritten in the main code, but most 
.................... // applications will be fine with these defaults. 
.................... // 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... void can_init(void) { 
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set 
*
05F6:  MOVLW  04
05F8:  MOVWF  x7C
05FA:  RCALL  0474
....................    can_set_baud(); 
05FC:  BRA    0496
....................  
....................    RXB0CON=0; 
05FE:  CLRF   F60
....................    RXB0CON.rxm=CAN_RX_VALID; 
0600:  MOVLW  9F
0602:  ANDWF  F60,W
0604:  MOVWF  F60
....................    RXB0CON.rxb0dben=CAN_USE_RX_DOUBLE_BUFFER; 
0606:  BSF    F60.2
....................    RXB1CON=RXB0CON; 
0608:  MOVFF  F60,F50
....................  
....................    CIOCON.endrhi=CAN_ENABLE_DRIVE_HIGH; 
060C:  BCF    F73.5
....................    CIOCON.cancap=CAN_ENABLE_CAN_CAPTURE; 
060E:  BCF    F73.4
....................    CIOCON.tx2src=CAN_CANTX2_SOURCE;       //added 3/30/09 for PIC18F6585/8585/6680/8680 
0610:  BCF    F73.7
....................    CIOCON.tx2en=CAN_ENABLE_CANTX2;        //added 3/30/09 for PIC18F6585/8585/6680/8680 
0612:  BCF    F73.6
....................  
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 
0614:  MOVLW  0F
0616:  MOVWF  x7D
0618:  MOVLW  1B
061A:  MOVWF  x7C
061C:  CLRF   x81
061E:  CLRF   x80
0620:  CLRF   x7F
0622:  CLRF   x7E
0624:  MOVLW  01
0626:  MOVWF  x82
0628:  RCALL  04C6
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 
062A:  MOVLW  0F
062C:  MOVWF  x7D
062E:  MOVLW  03
0630:  MOVWF  x7C
0632:  CLRF   x81
0634:  CLRF   x80
0636:  CLRF   x7F
0638:  CLRF   x7E
063A:  MOVLW  01
063C:  MOVWF  x82
063E:  RCALL  04C6
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 
0640:  MOVLW  0F
0642:  MOVWF  x7D
0644:  MOVLW  07
0646:  MOVWF  x7C
0648:  CLRF   x81
064A:  CLRF   x80
064C:  CLRF   x7F
064E:  CLRF   x7E
0650:  MOVLW  01
0652:  MOVWF  x82
0654:  RCALL  04C6
....................  
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 
0656:  MOVLW  0F
0658:  MOVWF  x7D
065A:  MOVLW  1F
065C:  MOVWF  x7C
065E:  CLRF   x81
0660:  CLRF   x80
0662:  CLRF   x7F
0664:  CLRF   x7E
0666:  MOVLW  01
0668:  MOVWF  x82
066A:  RCALL  04C6
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 
066C:  MOVLW  0F
066E:  MOVWF  x7D
0670:  MOVLW  0B
0672:  MOVWF  x7C
0674:  CLRF   x81
0676:  CLRF   x80
0678:  CLRF   x7F
067A:  CLRF   x7E
067C:  MOVLW  01
067E:  MOVWF  x82
0680:  RCALL  04C6
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 
0682:  MOVLW  0F
0684:  MOVWF  x7D
0686:  MOVWF  x7C
0688:  CLRF   x81
068A:  CLRF   x80
068C:  CLRF   x7F
068E:  CLRF   x7E
0690:  MOVLW  01
0692:  MOVWF  x82
0694:  RCALL  04C6
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 
0696:  MOVLW  0F
0698:  MOVWF  x7D
069A:  MOVLW  13
069C:  MOVWF  x7C
069E:  CLRF   x81
06A0:  CLRF   x80
06A2:  CLRF   x7F
06A4:  CLRF   x7E
06A6:  MOVLW  01
06A8:  MOVWF  x82
06AA:  RCALL  04C6
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 
06AC:  MOVLW  0F
06AE:  MOVWF  x7D
06B0:  MOVLW  17
06B2:  MOVWF  x7C
06B4:  CLRF   x81
06B6:  CLRF   x80
06B8:  CLRF   x7F
06BA:  CLRF   x7E
06BC:  MOVLW  01
06BE:  MOVWF  x82
06C0:  RCALL  04C6
....................  
....................   #if (getenv("DEVICE") == "PIC18F6585") || (getenv("DEVICE") == "PIC18LF6585") || \ 
....................       (getenv("DEVICE") == "PIC18F6680") || (getenv("DEVICE") == "PIC18LF6680") || \ 
....................       (getenv("DEVICE") == "PIC18F8585") || (getenv("DEVICE") == "PIC18LF8585") || \ 
....................       (getenv("DEVICE") == "PIC18F8680") || (getenv("DEVICE") == "PIC18LF8680") || \ 
....................       (getenv("DEVICE") == "PIC18C658") || (getenv("DEVICE") == "PIC18C858") 
....................    set_tris_g((*getenv("SFR:TRISG") & 0xFE) | 0x04);  //G2 in, G0 out 
....................    if(CAN_ENABLE_CANTX2) 
....................     bit_clear(*getenv("SFR:TRISG"), 1);  //G1 out 
....................   #elif getenv("FUSE_SET:CANE") 
....................    set_tris_e((*getenv("SFR:TRISE") & 0xDF) | 0x10);  //E4 in, E5 out 
....................   #elif getenv("FUSE_SET:CANC") 
....................    set_tris_c((*getenv("SFR:TRISC") & 0xBF) | 0x80);  //C7 in, C6 out 
....................   #else 
....................    set_tris_b((*getenv("SFR:TRISB") & 0xFB) | 0x08);  //B3 in, B2 out 
06C2:  MOVF   F93,W
06C4:  ANDLW  FB
06C6:  IORLW  08
06C8:  MOVWF  F93
....................   #endif 
....................  
....................    can_set_mode(CAN_OP_NORMAL); 
06CA:  CLRF   x7C
06CC:  RCALL  0474
06CE:  GOTO   152E (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_baud() 
.................... // 
.................... // Configures the baud rate control registers.  All the defines here 
.................... // are defaulted in the can-18xxx8.h file.  These defaults can, and 
.................... // probably should, be overwritten in the main code. 
.................... // 
.................... // Current defaults are set to work with Microchip's MCP250xxx CAN 
.................... // Developers Kit if this PIC is running at 20Mhz. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_baud(void) { 
....................    BRGCON1.brp=CAN_BRG_PRESCALAR; 
*
0496:  MOVLW  C0
0498:  ANDWF  F70,W
049A:  IORLW  04
049C:  MOVWF  F70
....................    BRGCON1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH; 
049E:  MOVLW  3F
04A0:  ANDWF  F70,W
04A2:  MOVWF  F70
....................  
....................    BRGCON2.prseg=CAN_BRG_PROPAGATION_TIME; 
04A4:  MOVLW  F8
04A6:  ANDWF  F71,W
04A8:  IORLW  02
04AA:  MOVWF  F71
....................    BRGCON2.seg1ph=CAN_BRG_PHASE_SEGMENT_1; 
04AC:  MOVLW  C7
04AE:  ANDWF  F71,W
04B0:  IORLW  28
04B2:  MOVWF  F71
....................    BRGCON2.sam=CAN_BRG_SAM; 
04B4:  BCF    F71.6
....................    BRGCON2.seg2phts=CAN_BRG_SEG_2_PHASE_TS; 
04B6:  BSF    F71.7
....................  
....................    BRGCON3.seg2ph=CAN_BRG_PHASE_SEGMENT_2; 
04B8:  MOVLW  F8
04BA:  ANDWF  F72,W
04BC:  IORLW  05
04BE:  MOVWF  F72
....................    BRGCON3.wakfil=CAN_BRG_WAKE_FILTER; 
04C0:  BCF    F72.6
04C2:  GOTO   05FE (RETURN)
.................... } 
....................  
.................... void can_set_mode(CAN_OP_MODE mode) { 
....................    CANCON.reqop=mode; 
*
0474:  SWAPF  x7C,W
0476:  ANDLW  70
0478:  MOVWF  00
047A:  BCF    FD8.0
047C:  RLCF   00,F
047E:  MOVLW  1F
0480:  ANDWF  F6F,W
0482:  IORWF  00,W
0484:  MOVWF  F6F
....................    while( (CANSTAT.opmode) != mode ); 
0486:  MOVFF  F6E,00
048A:  SWAPF  00,F
048C:  RRCF   00,W
048E:  ANDLW  07
0490:  SUBWF  x7C,W
0492:  BNZ   0486
0494:  RETURN 0
.................... } 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_set_id() 
.................... // 
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to 
.................... // configure the defined buffer to use the specified ID 
.................... // 
.................... //   Parameters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     id - ID to set buffer to 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... void can_set_id(unsigned int* addr, unsigned int32 id, int1 ext) { 
....................    int *ptr; 
....................  
....................    ptr=addr; 
*
04C6:  MOVFF  7D,84
04CA:  MOVFF  7C,83
....................  
....................    if (ext) {  //extended 
04CE:  MOVF   x82,F
04D0:  BZ    0576
....................       //eidl 
....................       *ptr=make8(id,0); //0:7 
04D2:  MOVFF  83,FE9
04D6:  MOVFF  84,FEA
04DA:  MOVFF  7E,FEF
....................  
....................       //eidh 
....................       ptr--; 
04DE:  MOVF   x83,W
04E0:  BTFSC  FD8.2
04E2:  DECF   x84,F
04E4:  DECF   x83,F
....................       *ptr=make8(id,1); //8:15 
04E6:  MOVFF  83,FE9
04EA:  MOVFF  84,FEA
04EE:  MOVFF  7F,FEF
....................  
....................       //sidl 
....................       ptr--; 
04F2:  MOVF   x83,W
04F4:  BTFSC  FD8.2
04F6:  DECF   x84,F
04F8:  DECF   x83,F
....................       *ptr=make8(id,2) & 0x03;   //16:17 
04FA:  MOVFF  83,FE9
04FE:  MOVFF  84,FEA
0502:  MOVF   x80,W
0504:  ANDLW  03
0506:  MOVWF  FEF
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20 
0508:  MOVFF  83,FE9
050C:  MOVFF  84,FEA
0510:  MOVFF  80,00
0514:  RLCF   00,F
0516:  RLCF   00,F
0518:  RLCF   00,F
051A:  MOVLW  F8
051C:  ANDWF  00,F
051E:  MOVF   00,W
0520:  ANDLW  E0
0522:  IORWF  FEF,W
0524:  MOVWF  FEF
....................       *ptr|=0x08; 
0526:  MOVFF  83,FE9
052A:  MOVFF  84,FEA
052E:  MOVF   FEF,W
0530:  IORLW  08
0532:  MOVWF  FEF
....................  
....................  
....................       //sidh 
....................       ptr--; 
0534:  MOVF   x83,W
0536:  BTFSC  FD8.2
0538:  DECF   x84,F
053A:  DECF   x83,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23 
053C:  MOVFF  83,FE9
0540:  MOVFF  84,FEA
0544:  MOVFF  80,00
0548:  SWAPF  00,F
054A:  RRCF   00,F
054C:  MOVLW  07
054E:  ANDWF  00,F
0550:  MOVF   00,W
0552:  ANDLW  07
0554:  MOVWF  FEF
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28 
0556:  MOVFF  83,FE9
055A:  MOVFF  84,FEA
055E:  MOVFF  81,00
0562:  RLCF   00,F
0564:  RLCF   00,F
0566:  RLCF   00,F
0568:  MOVLW  F8
056A:  ANDWF  00,F
056C:  MOVF   00,W
056E:  ANDLW  F8
0570:  IORWF  FEF,W
0572:  MOVWF  FEF
....................    } 
0574:  BRA    05F4
....................    else {   //standard 
....................       //eidl 
....................       *ptr=0; 
0576:  MOVFF  83,FE9
057A:  MOVFF  84,FEA
057E:  CLRF   FEF
....................  
....................       //eidh 
....................       ptr--; 
0580:  MOVF   x83,W
0582:  BTFSC  FD8.2
0584:  DECF   x84,F
0586:  DECF   x83,F
....................       *ptr=0; 
0588:  MOVFF  83,FE9
058C:  MOVFF  84,FEA
0590:  CLRF   FEF
....................  
....................       //sidl 
....................       ptr--; 
0592:  MOVF   x83,W
0594:  BTFSC  FD8.2
0596:  DECF   x84,F
0598:  DECF   x83,F
....................       *ptr=(make8(id,0) << 5) & 0xE0; 
059A:  MOVFF  83,FE9
059E:  MOVFF  84,FEA
05A2:  MOVFF  7E,00
05A6:  SWAPF  00,F
05A8:  RLCF   00,F
05AA:  MOVLW  E0
05AC:  ANDWF  00,F
05AE:  MOVF   00,W
05B0:  ANDLW  E0
05B2:  MOVWF  FEF
....................  
....................       //sidh 
....................       ptr--; 
05B4:  MOVF   x83,W
05B6:  BTFSC  FD8.2
05B8:  DECF   x84,F
05BA:  DECF   x83,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F; 
05BC:  MOVFF  83,FE9
05C0:  MOVFF  84,FEA
05C4:  MOVFF  7E,00
05C8:  RRCF   00,F
05CA:  RRCF   00,F
05CC:  RRCF   00,F
05CE:  MOVLW  1F
05D0:  ANDWF  00,F
05D2:  MOVF   00,W
05D4:  ANDLW  1F
05D6:  MOVWF  FEF
....................       *ptr|=(make8(id,1) << 5) & 0xE0; 
05D8:  MOVFF  83,FE9
05DC:  MOVFF  84,FEA
05E0:  MOVFF  7F,00
05E4:  SWAPF  00,F
05E6:  RLCF   00,F
05E8:  MOVLW  E0
05EA:  ANDWF  00,F
05EC:  MOVF   00,W
05EE:  ANDLW  E0
05F0:  IORWF  FEF,W
05F2:  MOVWF  FEF
....................    } 
05F4:  RETURN 0
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_get_id() 
.................... // 
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id()) 
.................... // This is used after receiving a message, to see which ID sent the message. 
.................... // 
.................... //   Parameters: 
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL. 
.................... //            For example, a pointer to RXM1EIDL 
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not 
.................... // 
.................... //   Returns: 
.................... //     The ID of the buffer 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... unsigned int32 can_get_id(unsigned int * addr, int1 ext) { 
....................    unsigned int32 ret; 
....................    unsigned int * ptr; 
....................  
....................    ret=0; 
*
0FF0:  CLRF   x8E
0FF2:  CLRF   x8D
0FF4:  CLRF   x8C
0FF6:  CLRF   x8B
....................    ptr=addr; 
0FF8:  MOVFF  89,90
0FFC:  MOVFF  88,8F
....................  
....................    if (ext) { 
1000:  MOVF   x8A,F
1002:  BTFSC  FD8.2
1004:  BRA    1118
....................       ret=*ptr;  //eidl 
1006:  MOVFF  8F,FE9
100A:  MOVFF  90,FEA
100E:  CLRF   x8E
1010:  CLRF   x8D
1012:  CLRF   x8C
1014:  MOVFF  FEF,8B
....................  
....................       ptr--;     //eidh 
1018:  MOVF   x8F,W
101A:  BTFSC  FD8.2
101C:  DECF   x90,F
101E:  DECF   x8F,F
....................       ret|=((unsigned int32)*ptr << 8); 
1020:  MOVFF  8F,FE9
1024:  MOVFF  90,FEA
1028:  MOVF   FEF,W
102A:  CLRF   x93
102C:  CLRF   x92
102E:  MOVWF  x91
1030:  CLRF   00
1032:  MOVF   00,W
1034:  IORWF  x8B,F
1036:  MOVF   x91,W
1038:  IORWF  x8C,F
103A:  MOVF   x92,W
103C:  IORWF  x8D,F
103E:  MOVF   x93,W
1040:  IORWF  x8E,F
....................  
....................       ptr--;     //sidl 
1042:  MOVF   x8F,W
1044:  BTFSC  FD8.2
1046:  DECF   x90,F
1048:  DECF   x8F,F
....................       ret|=((unsigned int32)*ptr & 0x03) << 16; 
104A:  MOVFF  8F,FE9
104E:  MOVFF  90,FEA
1052:  MOVF   FEF,W
1054:  CLRF   x94
1056:  CLRF   x93
1058:  CLRF   x92
105A:  MOVWF  x91
105C:  MOVLW  03
105E:  ANDWF  x91,F
1060:  CLRF   x92
1062:  CLRF   x93
1064:  CLRF   x94
1066:  CLRF   00
1068:  CLRF   01
106A:  MOVF   00,W
106C:  IORWF  x8B,F
106E:  MOVF   01,W
1070:  IORWF  x8C,F
1072:  MOVF   x91,W
1074:  IORWF  x8D,F
1076:  MOVF   x92,W
1078:  IORWF  x8E,F
....................       ret|=((unsigned int32)*ptr & 0xE0) << 13; 
107A:  MOVFF  8F,FE9
107E:  MOVFF  90,FEA
1082:  MOVF   FEF,W
1084:  CLRF   x94
1086:  CLRF   x93
1088:  CLRF   x92
108A:  MOVWF  x91
108C:  MOVLW  E0
108E:  ANDWF  x91,F
1090:  CLRF   x92
1092:  CLRF   x93
1094:  CLRF   x94
1096:  CLRF   00
1098:  RLCF   x91,W
109A:  MOVWF  01
109C:  RLCF   x92,W
109E:  MOVWF  02
10A0:  RLCF   x93,W
10A2:  MOVWF  03
10A4:  RLCF   01,F
10A6:  RLCF   02,F
10A8:  RLCF   03,F
10AA:  RLCF   01,F
10AC:  RLCF   02,F
10AE:  RLCF   03,F
10B0:  RLCF   01,F
10B2:  RLCF   02,F
10B4:  RLCF   03,F
10B6:  RLCF   01,F
10B8:  RLCF   02,F
10BA:  RLCF   03,F
10BC:  MOVLW  E0
10BE:  ANDWF  01,F
10C0:  MOVF   00,W
10C2:  IORWF  x8B,F
10C4:  MOVF   01,W
10C6:  IORWF  x8C,F
10C8:  MOVF   02,W
10CA:  IORWF  x8D,F
10CC:  MOVF   03,W
10CE:  IORWF  x8E,F
....................  
....................       ptr--;     //sidh 
10D0:  MOVF   x8F,W
10D2:  BTFSC  FD8.2
10D4:  DECF   x90,F
10D6:  DECF   x8F,F
....................       ret|=((unsigned int32)*ptr << 21); 
10D8:  MOVFF  8F,FE9
10DC:  MOVFF  90,FEA
10E0:  MOVF   FEF,W
10E2:  CLRF   x92
10E4:  MOVWF  x91
10E6:  CLRF   00
10E8:  CLRF   01
10EA:  RLCF   x91,W
10EC:  MOVWF  02
10EE:  RLCF   x92,W
10F0:  MOVWF  03
10F2:  RLCF   02,F
10F4:  RLCF   03,F
10F6:  RLCF   02,F
10F8:  RLCF   03,F
10FA:  RLCF   02,F
10FC:  RLCF   03,F
10FE:  RLCF   02,F
1100:  RLCF   03,F
1102:  MOVLW  E0
1104:  ANDWF  02,F
1106:  MOVF   00,W
1108:  IORWF  x8B,F
110A:  MOVF   01,W
110C:  IORWF  x8C,F
110E:  MOVF   02,W
1110:  IORWF  x8D,F
1112:  MOVF   03,W
1114:  IORWF  x8E,F
....................  
....................    } 
1116:  BRA    11BE
....................    else { 
....................       ptr-=2;    //sidl 
1118:  MOVLW  02
111A:  SUBWF  x8F,F
111C:  MOVLW  00
111E:  SUBWFB x90,F
....................       ret=((unsigned int32)*ptr & 0xE0) >> 5; 
1120:  MOVFF  8F,FE9
1124:  MOVFF  90,FEA
1128:  MOVF   FEF,W
112A:  CLRF   x94
112C:  CLRF   x93
112E:  CLRF   x92
1130:  MOVWF  x91
1132:  MOVLW  E0
1134:  ANDWF  x91,F
1136:  CLRF   x92
1138:  CLRF   x93
113A:  CLRF   x94
113C:  RRCF   x94,W
113E:  MOVWF  x8E
1140:  RRCF   x93,W
1142:  MOVWF  x8D
1144:  RRCF   x92,W
1146:  MOVWF  x8C
1148:  RRCF   x91,W
114A:  MOVWF  x8B
114C:  RRCF   x8E,F
114E:  RRCF   x8D,F
1150:  RRCF   x8C,F
1152:  RRCF   x8B,F
1154:  RRCF   x8E,F
1156:  RRCF   x8D,F
1158:  RRCF   x8C,F
115A:  RRCF   x8B,F
115C:  RRCF   x8E,F
115E:  RRCF   x8D,F
1160:  RRCF   x8C,F
1162:  RRCF   x8B,F
1164:  RRCF   x8E,F
1166:  RRCF   x8D,F
1168:  RRCF   x8C,F
116A:  RRCF   x8B,F
116C:  MOVLW  07
116E:  ANDWF  x8E,F
....................  
....................       ptr--;     //sidh 
1170:  MOVF   x8F,W
1172:  BTFSC  FD8.2
1174:  DECF   x90,F
1176:  DECF   x8F,F
....................       ret|=((unsigned int32)*ptr << 3); 
1178:  MOVFF  8F,FE9
117C:  MOVFF  90,FEA
1180:  MOVF   FEF,W
1182:  CLRF   x94
1184:  CLRF   x93
1186:  CLRF   x92
1188:  MOVWF  x91
118A:  RLCF   x91,W
118C:  MOVWF  00
118E:  RLCF   x92,W
1190:  MOVWF  01
1192:  RLCF   x93,W
1194:  MOVWF  02
1196:  RLCF   x94,W
1198:  MOVWF  03
119A:  RLCF   00,F
119C:  RLCF   01,F
119E:  RLCF   02,F
11A0:  RLCF   03,F
11A2:  RLCF   00,F
11A4:  RLCF   01,F
11A6:  RLCF   02,F
11A8:  RLCF   03,F
11AA:  MOVLW  F8
11AC:  ANDWF  00,F
11AE:  MOVF   00,W
11B0:  IORWF  x8B,F
11B2:  MOVF   01,W
11B4:  IORWF  x8C,F
11B6:  MOVF   02,W
11B8:  IORWF  x8D,F
11BA:  MOVF   03,W
11BC:  IORWF  x8E,F
....................    } 
....................  
....................    return(ret); 
11BE:  MOVFF  8B,00
11C2:  MOVFF  8C,01
11C6:  MOVFF  8D,02
11CA:  MOVFF  8E,03
11CE:  GOTO   2064 (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_putd() 
.................... // 
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will 
.................... // send when the CAN bus becomes available. 
.................... // 
.................... //    Parameters: 
.................... //       id - ID to transmit data as 
.................... //       data - pointer to data to send 
.................... //       len - length of data to send 
.................... //       priority - priority of message.  The higher the number, the 
.................... //                  sooner the CAN peripheral will send the message. 
.................... //                  Numbers 0 through 3 are valid. 
.................... //       ext - TRUE to use an extended ID, FALSE if not 
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT 
.................... // 
.................... //    Returns: 
.................... //       If successful, it will return TRUE 
.................... //       If un-successful, will return FALSE 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_putd(unsigned int32 id, unsigned int * data, unsigned int len, unsigned int priority, int1 ext, int1 rtr) { 
....................    unsigned int i; 
....................    unsigned int * txd0; 
....................    unsigned int port; 
....................  
....................    txd0=&TXRXBaD0; 
....................  
....................     // find empty transmitter 
....................     //map access bank addresses to empty transmitter 
....................    if (!TXB0CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX0; 
....................       port=0; 
....................    } 
....................    else if (!TXB1CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX1; 
....................       port=1; 
....................    } 
....................    else if (!TXB2CON.txreq) { 
....................       CANCON.win=CAN_WIN_TX2; 
....................       port=2; 
....................    } 
....................    else { 
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n"); 
....................       #endif 
....................       return(0); 
....................    } 
....................  
....................    //set priority. 
....................    TXBaCON.txpri=priority; 
....................  
....................    //set tx mask 
....................    can_set_id(TXRXBaID, id, ext); 
....................  
....................    //set tx data count 
....................    TXBaDLC=len; 
....................    TXBaDLC.rtr=rtr; 
....................  
....................     for (i=0; i<len; i++) { 
....................       *txd0=*data; 
....................       txd0++; 
....................       data++; 
....................     } 
....................  
....................    //enable transmission 
....................    TXBaCON.txreq=1; 
....................  
....................    CANCON.win=CAN_WIN_RX0; 
....................  
....................    #if CAN_DO_DEBUG 
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr); 
....................             if ((len)&&(!rtr)) { 
....................                data-=len; 
....................                can_debug("  DATA = "); 
....................                for (i=0;i<len;i++) { 
....................                   can_debug("%X ",*data); 
....................                   data++; 
....................                } 
....................                can_debug("\r\n"); 
....................             } 
....................    #endif 
....................  
....................    return(1); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // can_getd() 
.................... // 
.................... // Gets data from a receive buffer, if the data exists 
.................... // 
.................... //    Returns: 
.................... //      id - ID who sent message 
.................... //      data - pointer to array of data 
.................... //      len - length of received data 
.................... //      stat - structure holding some information (such as which buffer 
.................... //             received it, ext or standard, etc) 
.................... // 
.................... //    Returns: 
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE 
.................... //      if there was none. 
.................... // 
.................... //////////////////////////////////////////////////////////////////////// 
.................... int1 can_getd(unsigned int32 & id, unsigned int * data, unsigned int & len, struct rx_stat & stat) 
.................... { 
....................     unsigned int i; 
....................     unsigned int * ptr; 
....................  
....................     if (RXB0CON.rxful) { 
*
1FD0:  BTFSS  F60.7
1FD2:  BRA    2002
....................         CANCON.win=CAN_WIN_RX0; 
1FD4:  MOVLW  F1
1FD6:  ANDWF  F6F,W
1FD8:  MOVWF  F6F
....................         stat.buffer=0; 
1FDA:  BCF    42.4
....................  
....................         CAN_INT_RXB0IF=0; 
1FDC:  BCF    FA4.0
....................  
....................         stat.err_ovfl=COMSTAT.rx0ovfl; 
1FDE:  BCF    42.0
1FE0:  BTFSC  F74.7
1FE2:  BSF    42.0
....................         COMSTAT.rx0ovfl=0; 
1FE4:  BCF    F74.7
....................  
....................         if (RXB0CON.rxb0dben) { 
1FE6:  BTFSS  F60.2
1FE8:  BRA    2000
....................          stat.filthit=RXB0CON.filthit0; 
1FEA:  MOVLW  00
1FEC:  BTFSC  F60.0
1FEE:  MOVLW  01
1FF0:  ANDLW  07
1FF2:  MOVWF  00
1FF4:  BCF    FD8.0
1FF6:  RLCF   00,F
1FF8:  MOVLW  F1
1FFA:  ANDWF  42,W
1FFC:  IORWF  00,W
1FFE:  MOVWF  42
....................         } 
....................     } 
2000:  BRA    203A
....................     else if ( RXB1CON.rxful ) 
2002:  MOVLB  F
2004:  BTFSS  x50.7
2006:  BRA    2032
....................     { 
....................         CANCON.win=CAN_WIN_RX1; 
2008:  MOVLW  F1
200A:  ANDWF  F6F,W
200C:  IORLW  0A
200E:  MOVWF  F6F
....................         stat.buffer=1; 
2010:  BSF    42.4
....................  
....................         CAN_INT_RXB1IF=0; 
2012:  BCF    FA4.1
....................  
....................         stat.err_ovfl=COMSTAT.rx1ovfl; 
2014:  BCF    42.0
2016:  BTFSC  F74.6
2018:  BSF    42.0
....................         COMSTAT.rx1ovfl=0; 
201A:  BCF    F74.6
....................  
....................         stat.filthit=RXB1CON.filthit; 
201C:  MOVF   x50,W
201E:  ANDLW  07
2020:  ANDLW  07
2022:  MOVWF  00
2024:  BCF    FD8.0
2026:  RLCF   00,F
2028:  MOVLW  F1
202A:  ANDWF  42,W
202C:  IORWF  00,W
202E:  MOVWF  42
....................     } 
2030:  BRA    2038
....................     else { 
....................       #if CAN_DO_DEBUG 
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n"); 
....................       #endif 
....................       return (0); 
2032:  MOVLW  00
2034:  MOVWF  01
2036:  BRA    20CE
2038:  MOVLB  0
....................     } 
....................  
....................     len = RXBaDLC.dlc; 
203A:  MOVF   F65,W
203C:  ANDLW  0F
203E:  MOVWF  4F
....................     stat.rtr=RXBaDLC.rtr; 
2040:  BCF    42.5
2042:  BTFSC  F65.6
2044:  BSF    42.5
....................  
....................     stat.ext=TXRXBaSIDL.ext; 
2046:  BCF    42.6
2048:  BTFSC  F62.3
204A:  BSF    42.6
....................     id=can_get_id(TXRXBaID,stat.ext); 
204C:  MOVLW  00
204E:  BTFSC  42.6
2050:  MOVLW  01
2052:  MOVWF  x81
2054:  MOVLW  0F
2056:  MOVWF  x89
2058:  MOVLW  64
205A:  MOVWF  x88
205C:  MOVFF  81,8A
2060:  GOTO   0FF0
2064:  MOVFF  03,46
2068:  MOVFF  02,45
206C:  MOVFF  01,44
2070:  MOVFF  00,43
....................  
....................     ptr = &TXRXBaD0; 
2074:  MOVLW  0F
2076:  MOVWF  x80
2078:  MOVLW  66
207A:  MOVWF  x7F
....................     for ( i = 0; i < len; i++ ) { 
207C:  CLRF   x7E
207E:  MOVF   4F,W
2080:  SUBWF  x7E,W
2082:  BC    20AC
....................         *data = *ptr; 
2084:  MOVFF  7F,FE9
2088:  MOVFF  80,FEA
208C:  MOVFF  FEF,83
2090:  MOVFF  7D,FEA
2094:  MOVFF  7C,FE9
2098:  MOVFF  83,FEF
....................         data++; 
209C:  INCF   x7C,F
209E:  BTFSC  FD8.2
20A0:  INCF   x7D,F
....................         ptr++; 
20A2:  INCF   x7F,F
20A4:  BTFSC  FD8.2
20A6:  INCF   x80,F
20A8:  INCF   x7E,F
20AA:  BRA    207E
....................     } 
....................  
....................     // return to default addressing 
....................     CANCON.win=CAN_WIN_RX0; 
20AC:  MOVLW  F1
20AE:  ANDWF  F6F,W
20B0:  MOVWF  F6F
....................  
....................     stat.inv=CAN_INT_IRXIF; 
20B2:  BCF    42.7
20B4:  BTFSC  FA4.7
20B6:  BSF    42.7
....................     CAN_INT_IRXIF = 0; 
20B8:  BCF    FA4.7
....................  
....................     if (stat.buffer) { 
20BA:  BTFSS  42.4
20BC:  BRA    20C6
....................       RXB1CON.rxful=0; 
20BE:  MOVLB  F
20C0:  BCF    x50.7
....................     } 
20C2:  BRA    20CA
20C4:  MOVLB  0
....................     else { 
....................       RXB0CON.rxful=0; 
20C6:  BCF    F60.7
20C8:  MOVLB  F
....................     } 
....................  
....................     #if CAN_DO_DEBUG 
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl); 
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv); 
....................        if ((len)&&(!stat.rtr)) { 
....................           data-=len; 
....................           can_debug("\r\n    DATA = "); 
....................           for (i=0;i<len;i++) { 
....................             can_debug("%X ",*data); 
....................             data++; 
....................           } 
....................        } 
....................        can_debug("\r\n"); 
....................     #endif 
....................  
....................     return(1); 
20CA:  MOVLW  01
20CC:  MOVWF  01
.................... } 
....................  
....................  
....................  
....................  
.................... #include <LCD_TM_S.c> 
.................... // Lcd 16x2 in 4 bit mode  
.................... // LCD.C file diver  
.................... // As defined in the following structure the pin connection is as follows: 
.................... // RB4 RS 
.................... // RB5 Enable 
.................... // RB0 DB4 
.................... // RB1 DB5 
.................... // RB2 DB6 
.................... // RB3 DB7 
.................... // 
.................... // LCD pins B0-B3 are not used and RW is not used. 
.................... #define rs PIN_C0      //B4 
.................... //rw connect gnd 
.................... #define enabled PIN_C1 //B5 
.................... #define DB4 PIN_A3 // B0 
.................... #define DB5 PIN_A4 // B1 
.................... #define DB6 PIN_B7 // B2 
.................... #define DB7 PIN_B6 // N3 
....................  
.................... char const lcd_type=2; 
.................... char const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
.................... //======================================= 
.................... //======================================= 
.................... void make_out_data(char buffer_data) 
.................... {  
.................... output_bit(DB4,bit_test(buffer_data,0)); 
*
06F8:  BTFSC  x92.0
06FA:  BRA    0700
06FC:  BCF    F89.3
06FE:  BRA    0702
0700:  BSF    F89.3
0702:  BCF    F92.3
.................... output_bit(DB5,bit_test(buffer_data,1)); 
0704:  BTFSC  x92.1
0706:  BRA    070C
0708:  BCF    F89.4
070A:  BRA    070E
070C:  BSF    F89.4
070E:  BCF    F92.4
.................... output_bit(DB6,bit_test(buffer_data,2)); 
0710:  BTFSC  x92.2
0712:  BRA    0718
0714:  BCF    F8A.7
0716:  BRA    071A
0718:  BSF    F8A.7
071A:  BCF    F93.7
.................... output_bit(DB7,bit_test(buffer_data,3)); 
071C:  BTFSC  x92.3
071E:  BRA    0724
0720:  BCF    F8A.6
0722:  BRA    0726
0724:  BSF    F8A.6
0726:  BCF    F93.6
0728:  GOTO   0732 (RETURN)
.................... } 
.................... //=================================== 
.................... //=================================== 
.................... void lcd_send_nibble(char buffer_nibble) 
.................... { make_out_data(buffer_nibble); 
072C:  MOVFF  91,92
0730:  BRA    06F8
.................... delay_us(10); 
0732:  MOVLW  10
0734:  MOVWF  00
0736:  DECFSZ 00,F
0738:  BRA    0736
073A:  NOP   
.................... output_high(enabled); 
073C:  BSF    F8B.1
.................... delay_us(10); 
073E:  MOVLW  10
0740:  MOVWF  00
0742:  DECFSZ 00,F
0744:  BRA    0742
0746:  NOP   
.................... output_low(enabled); 
0748:  BCF    F8B.1
074A:  RETURN 0
.................... } 
.................... //==================================== 
.................... //==================================== 
.................... void lcd_send_byte( char address, char n ) 
.................... { 
.................... output_low(rs); //rs= = 0; 
074C:  BCF    F8B.0
.................... delay_ms(1); 
074E:  MOVLW  01
0750:  MOVWF  x90
0752:  RCALL  06D2
.................... output_bit(rs,address);//lcd.rs = address; 
0754:  MOVF   x8E,F
0756:  BNZ   075C
0758:  BCF    F8B.0
075A:  BRA    075E
075C:  BSF    F8B.0
.................... delay_us(20); 
075E:  MOVLW  20
0760:  MOVWF  00
0762:  DECFSZ 00,F
0764:  BRA    0762
0766:  BRA    0768
0768:  NOP   
.................... delay_us(20); 
076A:  MOVLW  20
076C:  MOVWF  00
076E:  DECFSZ 00,F
0770:  BRA    076E
0772:  BRA    0774
0774:  NOP   
.................... output_low(enabled);//lcd.enable = 0; 
0776:  BCF    F8B.1
.................... lcd_send_nibble(n >> 4); 
0778:  SWAPF  x8F,W
077A:  MOVWF  x90
077C:  MOVLW  0F
077E:  ANDWF  x90,F
0780:  MOVFF  90,91
0784:  RCALL  072C
.................... lcd_send_nibble(n & 0xf); 
0786:  MOVF   x8F,W
0788:  ANDLW  0F
078A:  MOVWF  x90
078C:  MOVWF  x91
078E:  RCALL  072C
0790:  RETURN 0
.................... } 
.................... //=============================================== 
.................... //=============================================== 
.................... void lcd_init() 
.................... { char i; 
.................... //set_tris_lcd(LCD_WRITE); 
.................... output_low(rs); //lcd.rs = 0; 
0792:  BCF    F8B.0
.................... //output_low(rw); //lcd.rw = 0; 
.................... output_low(enabled); //lcd.enable = 0; 
0794:  BCF    F8B.1
.................... delay_ms(200);//200MS 
0796:  MOVLW  C8
0798:  MOVWF  x90
079A:  RCALL  06D2
.................... for(i=1;i<=3;++i) 
079C:  MOVLW  01
079E:  MOVWF  x7C
07A0:  MOVF   x7C,W
07A2:  SUBLW  03
07A4:  BNC   07B6
.................... { 
.................... lcd_send_nibble(3); 
07A6:  MOVLW  03
07A8:  MOVWF  x91
07AA:  RCALL  072C
.................... delay_ms(10); 
07AC:  MOVLW  0A
07AE:  MOVWF  x90
07B0:  RCALL  06D2
07B2:  INCF   x7C,F
07B4:  BRA    07A0
.................... } 
.................... lcd_send_nibble(2); 
07B6:  MOVLW  02
07B8:  MOVWF  x91
07BA:  RCALL  072C
.................... for(i=0;i<=3;++i) 
07BC:  CLRF   x7C
07BE:  MOVF   x7C,W
07C0:  SUBLW  03
07C2:  BNC   07D6
.................... lcd_send_byte(0,LCD_INIT_STRING[i]); 
07C4:  CLRF   03
07C6:  MOVF   x7C,W
07C8:  RCALL  00BA
07CA:  MOVWF  x7D
07CC:  CLRF   x8E
07CE:  MOVWF  x8F
07D0:  RCALL  074C
07D2:  INCF   x7C,F
07D4:  BRA    07BE
07D6:  GOTO   1532 (RETURN)
.................... } 
.................... //================================================ 
.................... //================================================ 
.................... void lcd_gotoxy( char x, char y) 
.................... {char address; 
.................... switch(y) { 
*
0BCE:  MOVLW  01
0BD0:  SUBWF  x8B,W
0BD2:  ADDLW  FC
0BD4:  BC    0BF2
0BD6:  ADDLW  04
0BD8:  GOTO   0C06
.................... case 1 : address=0x80;break; 
0BDC:  MOVLW  80
0BDE:  MOVWF  x8C
0BE0:  BRA    0BF2
.................... case 2 : address=0xc0;break; 
0BE2:  MOVLW  C0
0BE4:  MOVWF  x8C
0BE6:  BRA    0BF2
.................... case 3 : address=0x94;break; 
0BE8:  MOVLW  94
0BEA:  MOVWF  x8C
0BEC:  BRA    0BF2
.................... case 4 : address=0xd4;break; 
0BEE:  MOVLW  D4
0BF0:  MOVWF  x8C
.................... } 
.................... address=address+(x-1); 
0BF2:  MOVLW  01
0BF4:  SUBWF  x8A,W
0BF6:  ADDWF  x8C,F
.................... lcd_send_byte(0,0x80|address); 
0BF8:  MOVF   x8C,W
0BFA:  IORLW  80
0BFC:  MOVWF  x8D
0BFE:  CLRF   x8E
0C00:  MOVWF  x8F
0C02:  RCALL  074C
0C04:  RETURN 0
.................... } 
.................... //================================================= 
.................... //================================================= 
.................... void lcd_putc( char c) { 
.................... switch (c) { 
*
0C28:  MOVF   x89,W
0C2A:  XORLW  0C
0C2C:  BZ    0C38
0C2E:  XORLW  06
0C30:  BZ    0C48
0C32:  XORLW  02
0C34:  BZ    0C54
0C36:  BRA    0C5E
.................... case '\f' : lcd_send_byte(0,1); 
0C38:  CLRF   x8E
0C3A:  MOVLW  01
0C3C:  MOVWF  x8F
0C3E:  RCALL  074C
.................... delay_ms(2); break; 
0C40:  MOVLW  02
0C42:  MOVWF  x90
0C44:  RCALL  06D2
0C46:  BRA    0C68
.................... case '\n' : lcd_gotoxy(1,2); break; 
0C48:  MOVLW  01
0C4A:  MOVWF  x8A
0C4C:  MOVLW  02
0C4E:  MOVWF  x8B
0C50:  RCALL  0BCE
0C52:  BRA    0C68
.................... case '\b' : lcd_send_byte(0,0x10); break; 
0C54:  CLRF   x8E
0C56:  MOVLW  10
0C58:  MOVWF  x8F
0C5A:  RCALL  074C
0C5C:  BRA    0C68
.................... default : lcd_send_byte(1,c); break; 
0C5E:  MOVLW  01
0C60:  MOVWF  x8E
0C62:  MOVFF  89,8F
0C66:  RCALL  074C
.................... } 
0C68:  RETURN 0
.................... } 
.................... //==================================================== 
.................... void LCD_Command(int cm); 
.................... void LCD_ShiftLeft(void); 
.................... void LCD_ShiftRight(void); 
.................... void LCD_MoveRight(char p); 
.................... void LCD_MoveLeft(char p); 
.................... void LCD_String(char*s,int dly); 
....................  
.................... void LCD_Command(int cm){ 
.................... lcd_send_byte(0,cm); 
.................... } 
....................  
.................... void LCD_ShiftLeft(void){ 
.................... lcd_send_byte(0,0x18); 
.................... } 
.................... void LCD_ShiftRight(void){ 
.................... lcd_send_byte(0,0x1C); 
.................... } 
.................... void LCD_MoveRight(char p){ 
.................... char i; 
.................... for(i=0;i<p;i++){ 
.................... LCD_ShiftRight(); 
.................... delay_ms(100); 
.................... } 
.................... } 
.................... void LCD_MoveLeft(char p){ 
.................... char i; 
.................... for(i=0;i<p;i++){ 
.................... LCD_ShiftLeft(); 
.................... delay_ms(100); 
.................... } 
.................... } 
.................... /* 
.................... void strcpy(char*s1,char*s2) { 
.................... while(*s1++ == *s2++); 
.................... } 
.................... */ 
.................... void LCD_String(char*s, int dly) { 
.................... while(*s!=0) { 
.................... lcd_putc(*s++); 
.................... delay_ms(dly); 
.................... } 
.................... } 
....................  
....................  
....................  
.................... BYTE address = 0x00, buffer[0x10]; 
.................... BYTE incoming = 0x00, state; 
.................... static unsigned int A0, A1, A2, T,L,H,C, M1, M2, NoB, NoBSet,SetV; 
.................... float volt, volts; 
.................... int16 ms; 
....................  
.................... /* 
.................... #int_timer2  
.................... void isr_timer2(void) { 
....................   // ms++; //keep a running timer that increments every milli-second 
.................... } 
.................... /* 
.................... /* 
.................... #INT_SSP 
.................... void ssp_interupt () 
.................... { 
....................    
....................  
....................    state = i2c_isr_state(); 
....................  
....................    if(state < 0x80)                     //Master is sending data 
....................    { 
....................       incoming = i2c_read(); 
....................       if(state == 1)                     //First received byte is address 
....................          address = incoming; 
....................       if(state == 2)                     //Second received byte is data 
....................          buffer[address] = incoming; 
....................    } 
....................    if(state == 0x80)                     //Master is requesting data 
....................    { 
....................      //i2c_write(buffer[address]); 
....................       i2c_write('B'); 
....................    } 
....................    if(state > 0x80) 
....................    { 
....................   // i2c_write(address); 
....................    i2c_write('C'); 
....................    //i2c_write(buffer[address]); 
....................    } 
.................... } 
.................... */ 
.................... #INT_EXT  
.................... void ext1_isr(void) {  
....................   switch(C) 
*
00CE:  MOVLW  01
00D0:  SUBWF  32,W
00D2:  ADDLW  FB
00D4:  BC    00F8
00D6:  ADDLW  05
00D8:  GOTO   00FE
....................   { 
....................    case 1: 
....................    
....................       L=A0; 
00DC:  MOVFF  2C,30
....................       break; 
00E0:  BRA    00F8
....................    case 2: 
....................     
....................       H=A0; 
00E2:  MOVFF  2C,31
....................       break; 
00E6:  BRA    00F8
....................    case 3: 
....................     
....................       M1=A0; 
00E8:  MOVFF  2C,33
....................       break; 
00EC:  BRA    00F8
....................    case 4: 
....................     
....................       M2=A0; 
00EE:  MOVFF  2C,34
....................       break; 
00F2:  BRA    00F8
....................     
....................    case 5: 
....................     
....................       NoBSet=NoB; 
00F4:  MOVFF  35,36
....................       break; 
....................   
....................   } 
.................... }     
....................  
00F8:  BCF    FF2.1
00FA:  GOTO   006C
.................... #INT_EXT1  
.................... void ext1_isr1(void) {  
....................  
.................... C++; 
*
0122:  INCF   32,F
.................... if(C>9){ 
0124:  MOVF   32,W
0126:  SUBLW  09
0128:  BC    012C
....................     C=0;} 
012A:  CLRF   32
....................  
.................... //   if (input(PIN_B0)==0) { //Possibly just slightly 'clearer' than using not  
.................... //     EXT_INT_EDGE(0,L_TO_H);  
.................... //      C++; 
.................... //       if(C>4){ 
.................... //          C=0;}  
.................... //       output_low(PIN_B1);  
.................... //   }  
.................... //    else {  
.................... //     EXT_INT_EDGE(0,H_TO_L);  
....................        
.................... //      output_high(PIN_B1);  
....................  // }  
....................  
012C:  BCF    FF0.0
012E:  GOTO   006C
.................... }  
....................  
....................  
.................... void main () 
*
1468:  CLRF   FF8
146A:  BCF    FD0.7
146C:  BSF    07.7
146E:  BSF    FB8.3
1470:  MOVLW  08
1472:  MOVWF  FAF
1474:  MOVLW  02
1476:  MOVWF  FB0
1478:  MOVLW  A6
147A:  MOVWF  FAC
147C:  MOVLW  90
147E:  MOVWF  FAB
1480:  CLRF   19
1482:  CLRF   2A
1484:  MOVF   FC1,W
1486:  ANDLW  C0
1488:  IORLW  0F
148A:  MOVWF  FC1
148C:  CLRF   2C
148E:  CLRF   2D
1490:  CLRF   2E
1492:  CLRF   2F
1494:  CLRF   30
1496:  CLRF   31
1498:  CLRF   32
149A:  CLRF   33
149C:  CLRF   34
149E:  CLRF   35
14A0:  CLRF   36
14A2:  CLRF   37
14A4:  CLRF   5B
14A6:  CLRF   5A
14A8:  CLRF   59
14AA:  MOVLW  18
14AC:  MOVWF  58
14AE:  BCF    5C.0
14B0:  BCF    5C.1
14B2:  MOVLW  08
14B4:  MOVWF  5D
14B6:  MOVLW  03
14B8:  MOVWF  5E
.................... { 
....................    struct rx_stat rxstat; 
....................    int32 rx_id;  // id can bu receiver 
....................    int in_data[8];// number of buytes for receiver  
....................    int rx_len; 
....................   // output_bit(PIN_B4,0); 
.................... //send a request (tx_rtr=1) for 8 bytes of data (tx_len=8) from id 24 (tx_id=24) 
....................    int out_data[8]; 
....................    int32 tx_id=24; 
....................    int1 tx_rtr=0;// gia tri cu la 1 
....................    int1 tx_ext=0;//gia tri cu la 0 
....................    int tx_len=8; 
....................    int tx_pri=3; 
....................    int i; 
....................  
....................    for (i=0;i<8;i++) { 
14BA:  CLRF   5F
14BC:  MOVF   5F,W
14BE:  SUBLW  07
14C0:  BNC   14E6
....................       out_data[i]=0; 
14C2:  CLRF   03
14C4:  MOVF   5F,W
14C6:  ADDLW  50
14C8:  MOVWF  FE9
14CA:  MOVLW  00
14CC:  ADDWFC 03,W
14CE:  MOVWF  FEA
14D0:  CLRF   FEF
....................       in_data[i]=0; 
14D2:  CLRF   03
14D4:  MOVF   5F,W
14D6:  ADDLW  47
14D8:  MOVWF  FE9
14DA:  MOVLW  00
14DC:  ADDWFC 03,W
14DE:  MOVWF  FEA
14E0:  CLRF   FEF
14E2:  INCF   5F,F
14E4:  BRA    14BC
....................    } 
....................  
.................... union conv{ 
.................... float f; 
.................... int8 b[4]; 
.................... }; 
.................... union conv temp, press, hu, temp_sht, hum_sht, temp_31855, press_rsc; 
....................    printf("\r\n\r\nCCS CAN EXAMPLE\r\n"); 
14E6:  MOVLW  32
14E8:  MOVWF  FF6
14EA:  MOVLW  01
14EC:  MOVWF  FF7
14EE:  CALL   0452
....................   
....................   // setup_timer_2(T2_DIV_BY_4,79,16);   //setup up timer2 to interrupt every 1ms if using 20Mhz clock 
....................   setup_timer_2(T2_DIV_BY_16, 249, 1);   //24,1 
14F2:  MOVLW  00
14F4:  IORLW  06
14F6:  MOVWF  FCA
14F8:  MOVLW  F9
14FA:  MOVWF  FCB
....................           //   The cycle time will be (1/clock)*4*t2div*(period+1) 
....................           //   In this program clock=10000000 and period=127 (below) 
....................           //   For the three possible selections the cycle time is: 
....................           //     (1/10000000)*4*1*128 =  51.2 us or 19.5 kHz 
....................   // enable_interrupts(INT_TIMER2);   //enable timer2 interrupt 
....................     
....................    //EXT_INT_EDGE(0,L_TO_H);  
....................    clear_interrupt(INT_EXT);  
14FC:  BCF    FF2.1
....................    enable_interrupts(INT_EXT);// B0 
14FE:  BSF    FF2.4
....................    set_tris_c(0x00); 
1500:  MOVLW  00
1502:  MOVWF  F94
....................    EXT_INT_EDGE(1,H_TO_L);  
1504:  BCF    FF1.5
....................    clear_interrupt(INT_EXT1);  
1506:  BCF    FF0.0
....................    enable_interrupts(INT_EXT1);// B1 
1508:  BSF    FF0.3
....................    output_low(PIN_C2); 
150A:  BCF    F8B.2
....................    setup_ccp1(CCP_PWM);  // PIN_C2 AS CCP PWM 
150C:  BCF    F8B.2
150E:  MOVLW  0C
1510:  MOVWF  FBD
....................    enable_interrupts(GLOBAL);       //enable all interrupts (else timer2 wont happen) 
1512:  MOVLW  C0
1514:  IORWF  FF2,F
....................   // enable_interrupts(INT_SSP); 
....................  
....................    setup_adc(ADC_CLOCK_DIV_16); //ADC_CLOCK_DIV_8 
1516:  MOVF   FC0,W
1518:  ANDLW  C0
151A:  IORLW  05
151C:  MOVWF  FC0
151E:  BCF    FC0.7
1520:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN2); //ALL_ANALOG 
1522:  MOVF   FC1,W
1524:  ANDLW  C0
1526:  IORLW  0C
1528:  MOVWF  FC1
....................     
....................    //setup_ccp1(CCP_PWM_PLUS_3);  
....................    can_init(); 
152A:  GOTO   05F6
....................    lcd_init(); 
152E:  GOTO   0792
....................    printf("\r\nRunning..."); 
1532:  MOVLW  48
1534:  MOVWF  FF6
1536:  MOVLW  01
1538:  MOVWF  FF7
153A:  CALL   0452
....................    C=0; 
153E:  CLRF   32
....................    // the initial value  
....................     
....................    L = 28; 
1540:  MOVLW  1C
1542:  MOVWF  30
....................    H = 40; 
1544:  MOVLW  28
1546:  MOVWF  31
....................    M1 = 50; 
1548:  MOVLW  32
154A:  MOVWF  33
....................    M2 = 50; 
154C:  MOVWF  34
....................    NoBSet = 1; 
154E:  MOVLW  01
1550:  MOVWF  36
....................    // end of the initial value 
....................   // output_float(PIN_B0); //Makes pin B3 Input 
....................   // output_float(PIN_B1); 
....................   // output_bit(PIN_B0,1); 
....................    
....................    while (TRUE) { 
....................     
....................     printf("\r\n state on i2c slave: %02x",state); 
1552:  MOVLW  56
1554:  MOVWF  FF6
1556:  MOVLW  01
1558:  MOVWF  FF7
155A:  MOVLW  17
155C:  MOVWF  x80
155E:  CALL   07DA
1562:  MOVFF  2B,7D
1566:  MOVLW  57
1568:  MOVWF  x7E
156A:  CALL   07FA
....................     printf("\r\n incoming from master i2c: %02x",buffer[address]); 
156E:  CLRF   03
1570:  MOVF   19,W
1572:  ADDLW  1A
1574:  MOVWF  FE9
1576:  MOVLW  00
1578:  ADDWFC 03,W
157A:  MOVWF  FEA
157C:  MOVFF  FEF,7C
1580:  MOVLW  72
1582:  MOVWF  FF6
1584:  MOVLW  01
1586:  MOVWF  FF7
1588:  MOVLW  1D
158A:  MOVWF  x80
158C:  CALL   07DA
1590:  MOVFF  7C,7D
1594:  MOVLW  57
1596:  MOVWF  x7E
1598:  CALL   07FA
....................    
....................     set_adc_channel(0); // EasyPIC Board: Read ADC 2 for PWM fan 
159C:  MOVLW  00
159E:  MOVWF  01
15A0:  MOVF   FC2,W
15A2:  ANDLW  C3
15A4:  IORWF  01,W
15A6:  MOVWF  FC2
....................     delay_ms(20); 
15A8:  MOVLW  14
15AA:  MOVWF  x90
15AC:  CALL   06D2
....................     A0= read_adc(); 
15B0:  BSF    FC2.1
15B2:  BTFSC  FC2.1
15B4:  BRA    15B2
15B6:  MOVFF  FC4,2C
....................    
....................    
....................     switch(C){ 
15BA:  MOVF   32,W
15BC:  ADDLW  F6
15BE:  BTFSC  FD8.0
15C0:  GOTO   1FBE
15C4:  ADDLW  0A
15C6:  GOTO   24B8
....................       
....................        case 0:  // Auto mode 
....................                // lcd_init();  // reset lcd 
....................               //  delay_ms(10); 
....................                
....................                 set_adc_channel(2); // EasyPIC Board: Read ADC 2 for PWM fan 
15CA:  MOVLW  08
15CC:  MOVWF  01
15CE:  MOVF   FC2,W
15D0:  ANDLW  C3
15D2:  IORWF  01,W
15D4:  MOVWF  FC2
....................                 delay_ms(20); 
15D6:  MOVLW  14
15D8:  MOVWF  x90
15DA:  CALL   06D2
....................                 A2= read_adc(); 
15DE:  BSF    FC2.1
15E0:  BTFSC  FC2.1
15E2:  BRA    15E0
15E4:  MOVFF  FC4,2E
....................                 volt = 0.073333*A2 + 0.03333; 
15E8:  CLRF   x7D
15EA:  MOVFF  2E,7C
15EE:  CALL   083C
15F2:  MOVLW  9D
15F4:  MOVWF  x8C
15F6:  MOVLW  2F
15F8:  MOVWF  x8B
15FA:  MOVLW  16
15FC:  MOVWF  x8A
15FE:  MOVLW  7B
1600:  MOVWF  x89
1602:  MOVFF  03,90
1606:  MOVFF  02,8F
160A:  MOVFF  01,8E
160E:  MOVFF  00,8D
1612:  CALL   0872
1616:  MOVFF  03,7F
161A:  MOVFF  02,7E
161E:  MOVFF  01,7D
1622:  MOVFF  00,7C
1626:  BCF    FD8.1
1628:  MOVFF  03,83
162C:  MOVFF  02,82
1630:  MOVFF  01,81
1634:  MOVFF  00,80
1638:  MOVLW  0A
163A:  MOVWF  x87
163C:  MOVLW  85
163E:  MOVWF  x86
1640:  MOVLW  08
1642:  MOVWF  x85
1644:  MOVLW  7A
1646:  MOVWF  x84
1648:  CALL   0964
164C:  MOVFF  03,3B
1650:  MOVFF  02,3A
1654:  MOVFF  01,39
1658:  MOVFF  00,38
....................                  
....................                 set_adc_channel(1); // EasyPIC Board: Read ADC 2 for PWM fan 
165C:  MOVLW  04
165E:  MOVWF  01
1660:  MOVF   FC2,W
1662:  ANDLW  C3
1664:  IORWF  01,W
1666:  MOVWF  FC2
....................                 delay_ms(20); 
1668:  MOVLW  14
166A:  MOVWF  x90
166C:  CALL   06D2
....................                 A1= read_adc(); 
1670:  BSF    FC2.1
1672:  BTFSC  FC2.1
1674:  BRA    1672
1676:  MOVFF  FC4,2D
....................                 volts = 0.073333*A1 + 0.03333; 
167A:  CLRF   x7D
167C:  MOVFF  2D,7C
1680:  CALL   083C
1684:  MOVLW  9D
1686:  MOVWF  x8C
1688:  MOVLW  2F
168A:  MOVWF  x8B
168C:  MOVLW  16
168E:  MOVWF  x8A
1690:  MOVLW  7B
1692:  MOVWF  x89
1694:  MOVFF  03,90
1698:  MOVFF  02,8F
169C:  MOVFF  01,8E
16A0:  MOVFF  00,8D
16A4:  CALL   0872
16A8:  MOVFF  03,7F
16AC:  MOVFF  02,7E
16B0:  MOVFF  01,7D
16B4:  MOVFF  00,7C
16B8:  BCF    FD8.1
16BA:  MOVFF  03,83
16BE:  MOVFF  02,82
16C2:  MOVFF  01,81
16C6:  MOVFF  00,80
16CA:  MOVLW  0A
16CC:  MOVWF  x87
16CE:  MOVLW  85
16D0:  MOVWF  x86
16D2:  MOVLW  08
16D4:  MOVWF  x85
16D6:  MOVLW  7A
16D8:  MOVWF  x84
16DA:  CALL   0964
16DE:  MOVFF  03,3F
16E2:  MOVFF  02,3E
16E6:  MOVFF  01,3D
16EA:  MOVFF  00,3C
....................                  
....................                 lcd_gotoxy(2,1); 
16EE:  MOVLW  02
16F0:  MOVWF  x8A
16F2:  MOVLW  01
16F4:  MOVWF  x8B
16F6:  CALL   0BCE
....................                 printf(lcd_putc,"      "); 
16FA:  MOVLW  94
16FC:  MOVWF  FF6
16FE:  MOVLW  01
1700:  MOVWF  FF7
1702:  CALL   0C6A
....................                 lcd_gotoxy(1,1); 
1706:  MOVLW  01
1708:  MOVWF  x8A
170A:  MOVWF  x8B
170C:  CALL   0BCE
....................                 printf(lcd_putc,"T%3.1f", temp_31855.f); 
1710:  MOVLW  54
1712:  MOVWF  x89
1714:  CALL   0C28
1718:  MOVLW  02
171A:  MOVWF  FE9
171C:  MOVFF  77,7F
1720:  MOVFF  76,7E
1724:  MOVFF  75,7D
1728:  MOVFF  74,7C
172C:  MOVLW  01
172E:  MOVWF  x80
1730:  CALL   0D56
....................                  
....................                 
....................                 lcd_gotoxy(8,1); 
1734:  MOVLW  08
1736:  MOVWF  x8A
1738:  MOVLW  01
173A:  MOVWF  x8B
173C:  CALL   0BCE
....................                 printf(lcd_putc,"    "); 
1740:  MOVLW  9C
1742:  MOVWF  FF6
1744:  MOVLW  01
1746:  MOVWF  FF7
1748:  CALL   0C6A
....................                 lcd_gotoxy(7,1); 
174C:  MOVLW  07
174E:  MOVWF  x8A
1750:  MOVLW  01
1752:  MOVWF  x8B
1754:  CALL   0BCE
....................                 printf(lcd_putc,"B%3.1f", volt); 
1758:  MOVLW  42
175A:  MOVWF  x89
175C:  CALL   0C28
1760:  MOVLW  02
1762:  MOVWF  FE9
1764:  MOVFF  3B,7F
1768:  MOVFF  3A,7E
176C:  MOVFF  39,7D
1770:  MOVFF  38,7C
1774:  MOVLW  01
1776:  MOVWF  x80
1778:  CALL   0D56
....................                // lcd_gotoxy(7,1); 
....................                // printf(lcd_putc,"M:%u", A0); 
....................                  
....................                 
....................                  
....................                 lcd_gotoxy(2,2); 
177C:  MOVLW  02
177E:  MOVWF  x8A
1780:  MOVWF  x8B
1782:  CALL   0BCE
....................                 printf(lcd_putc,"      "); 
1786:  MOVLW  A2
1788:  MOVWF  FF6
178A:  MOVLW  01
178C:  MOVWF  FF7
178E:  CALL   0C6A
....................                  
....................                  
....................                 lcd_gotoxy(1,2); 
1792:  MOVLW  01
1794:  MOVWF  x8A
1796:  MOVLW  02
1798:  MOVWF  x8B
179A:  CALL   0BCE
....................                 printf(lcd_putc,"L:%u", L); 
179E:  MOVLW  4C
17A0:  MOVWF  x89
17A2:  CALL   0C28
17A6:  MOVLW  3A
17A8:  MOVWF  x89
17AA:  CALL   0C28
17AE:  MOVFF  30,7C
17B2:  MOVLW  1B
17B4:  MOVWF  x7D
17B6:  CALL   0EF6
....................                  
....................                 lcd_gotoxy(7,2); 
17BA:  MOVLW  07
17BC:  MOVWF  x8A
17BE:  MOVLW  02
17C0:  MOVWF  x8B
17C2:  CALL   0BCE
....................                 printf(lcd_putc,"    "); 
17C6:  MOVLW  AA
17C8:  MOVWF  FF6
17CA:  MOVLW  01
17CC:  MOVWF  FF7
17CE:  CALL   0C6A
....................                  
....................                 lcd_gotoxy(6,2); 
17D2:  MOVLW  06
17D4:  MOVWF  x8A
17D6:  MOVLW  02
17D8:  MOVWF  x8B
17DA:  CALL   0BCE
....................                 printf(lcd_putc,"H:%u", H); 
17DE:  MOVLW  48
17E0:  MOVWF  x89
17E2:  CALL   0C28
17E6:  MOVLW  3A
17E8:  MOVWF  x89
17EA:  CALL   0C28
17EE:  MOVFF  31,7C
17F2:  MOVLW  1B
17F4:  MOVWF  x7D
17F6:  CALL   0EF6
....................                  
....................                 lcd_gotoxy(14,2); 
17FA:  MOVLW  0E
17FC:  MOVWF  x8A
17FE:  MOVLW  02
1800:  MOVWF  x8B
1802:  CALL   0BCE
....................                 printf(lcd_putc,"   "); 
1806:  MOVLW  B0
1808:  MOVWF  FF6
180A:  MOVLW  01
180C:  MOVWF  FF7
180E:  CALL   0C6A
....................                  
....................                 lcd_gotoxy(12,2); 
1812:  MOVLW  0C
1814:  MOVWF  x8A
1816:  MOVLW  02
1818:  MOVWF  x8B
181A:  CALL   0BCE
....................                 printf(lcd_putc,"P:%u", T);     
181E:  MOVLW  50
1820:  MOVWF  x89
1822:  CALL   0C28
1826:  MOVLW  3A
1828:  MOVWF  x89
182A:  CALL   0C28
182E:  MOVFF  2F,7C
1832:  MOVLW  1B
1834:  MOVWF  x7D
1836:  CALL   0EF6
....................                  
....................                 // main program for automatic mode 
....................                  output_bit(PIN_B5,0); // turn off battery 
183A:  BCF    F8A.5
183C:  BCF    F93.5
....................                  output_bit(PIN_C3,0); // turn off solar 
183E:  BCF    F8B.3
....................                  output_bit(PIN_C4,0); // turn off charger 
1840:  BCF    F8B.4
....................                    
....................                  if(volt < 11.9) 
1842:  MOVFF  3B,7F
1846:  MOVFF  3A,7E
184A:  MOVFF  39,7D
184E:  MOVFF  38,7C
1852:  MOVLW  66
1854:  MOVWF  x83
1856:  MOVWF  x82
1858:  MOVLW  3E
185A:  MOVWF  x81
185C:  MOVLW  82
185E:  MOVWF  x80
1860:  CALL   0F5C
1864:  BNC   186C
....................                  { 
....................                   output_bit(PIN_B5,0); // turn off battery 
1866:  BCF    F8A.5
1868:  BCF    F93.5
....................                   output_bit(PIN_C4,1); // turn on solar 
186A:  BSF    F8B.4
....................                   /* 
....................                   if(volts<14) 
....................                   { 
....................                   output_bit(PIN_C3,1); // turn on solar directly  
....................                   } 
....................                   else 
....................                   output_bit(PIN_C4,0); // turn off solar direct to blower for protect  
....................                   */ 
....................                  } 
....................                   
....................                  if(volt >12.9) 
186C:  MOVLW  66
186E:  MOVWF  x7F
1870:  MOVWF  x7E
1872:  MOVLW  4E
1874:  MOVWF  x7D
1876:  MOVLW  82
1878:  MOVWF  x7C
187A:  MOVFF  3B,83
187E:  MOVFF  3A,82
1882:  MOVFF  39,81
1886:  MOVFF  38,80
188A:  CALL   0F5C
188E:  BNC   1896
....................                  { 
....................                   output_bit(PIN_B5,1); // turn on battery 
1890:  BSF    F8A.5
1892:  BCF    F93.5
....................                   output_bit(PIN_C4,0); // turn off solar 
1894:  BCF    F8B.4
....................                  } 
....................                   
....................                 if(T>100) 
1896:  MOVF   2F,W
1898:  SUBLW  64
189A:  BC    18A0
....................                       { 
....................                       T=100; 
189C:  MOVLW  64
189E:  MOVWF  2F
....................                       } 
....................         
....................                 if(temp_31855.f<L) // A1: low level 
18A0:  CLRF   x7D
18A2:  MOVFF  30,7C
18A6:  CALL   083C
18AA:  MOVFF  77,7F
18AE:  MOVFF  76,7E
18B2:  MOVFF  75,7D
18B6:  MOVFF  74,7C
18BA:  MOVFF  03,83
18BE:  MOVFF  02,82
18C2:  MOVFF  01,81
18C6:  MOVFF  00,80
18CA:  CALL   0F5C
18CE:  BNC   18FC
....................                 { 
....................                    if(press_rsc.f<2) 
18D0:  MOVFF  7B,7F
18D4:  MOVFF  7A,7E
18D8:  MOVFF  79,7D
18DC:  MOVFF  78,7C
18E0:  CLRF   x83
18E2:  CLRF   x82
18E4:  CLRF   x81
18E6:  MOVLW  80
18E8:  MOVWF  x80
18EA:  CALL   0F5C
18EE:  BNC   18F4
....................                    { 
....................                    set_pwm1_duty(50); 
18F0:  MOVLW  32
18F2:  MOVWF  FBE
....................                    } 
....................                       /* 
....................                       if(T>30) 
....................                          { 
....................                            T--; 
....................                          
....................                          }   
....................                        else  
....................                          { 
....................                          T = 30; 
....................                          } 
....................                       delay_ms(500);     
....................                       */ 
....................                       T=1; 
18F4:  MOVLW  01
18F6:  MOVWF  2F
....................                       set_pwm1_duty(T); 
18F8:  MOVFF  2F,FBE
....................                 } 
....................                 if(temp_31855.f>H)// A2: high level 
18FC:  CLRF   x7D
18FE:  MOVFF  31,7C
1902:  CALL   083C
1906:  MOVFF  03,7F
190A:  MOVFF  02,7E
190E:  MOVFF  01,7D
1912:  MOVFF  00,7C
1916:  MOVFF  77,83
191A:  MOVFF  76,82
191E:  MOVFF  75,81
1922:  MOVFF  74,80
1926:  CALL   0F5C
192A:  BNC   1934
....................                 { 
....................                 /* 
....................                 if(T<100) 
....................                       { 
....................                       T++; 
....................                       } 
....................                     
....................                 delay_ms(50); 
....................                 */ 
....................                 T=100; 
192C:  MOVLW  64
192E:  MOVWF  2F
....................                 set_pwm1_duty(T); 
1930:  MOVFF  2F,FBE
....................                 } 
....................                  if((temp_31855.f>L)&&(temp_31855.f<H))  
1934:  CLRF   x7D
1936:  MOVFF  30,7C
193A:  CALL   083C
193E:  MOVFF  03,7F
1942:  MOVFF  02,7E
1946:  MOVFF  01,7D
194A:  MOVFF  00,7C
194E:  MOVFF  77,83
1952:  MOVFF  76,82
1956:  MOVFF  75,81
195A:  MOVFF  74,80
195E:  CALL   0F5C
1962:  BNC   199C
1964:  CLRF   x7D
1966:  MOVFF  31,7C
196A:  CALL   083C
196E:  MOVFF  77,7F
1972:  MOVFF  76,7E
1976:  MOVFF  75,7D
197A:  MOVFF  74,7C
197E:  MOVFF  03,83
1982:  MOVFF  02,82
1986:  MOVFF  01,81
198A:  MOVFF  00,80
198E:  CALL   0F5C
1992:  BNC   199C
....................                 { 
....................                 T=8; 
1994:  MOVLW  08
1996:  MOVWF  2F
....................                 set_pwm1_duty(T); 
1998:  MOVFF  2F,FBE
....................                 } 
....................                 
....................                 // end main program for automacit mode 
....................                  
....................                 break; 
199C:  BRA    1FBE
....................                  
....................        
....................       case 1: // Set low value  
....................                 //lcd_init();  // reset lcd 
....................                // delay_ms(10); 
....................                              
....................                  
....................                   lcd_gotoxy(1,1); 
199E:  MOVLW  01
19A0:  MOVWF  x8A
19A2:  MOVWF  x8B
19A4:  CALL   0BCE
....................                   printf(lcd_putc,"Set L           "); 
19A8:  MOVLW  B4
19AA:  MOVWF  FF6
19AC:  MOVLW  01
19AE:  MOVWF  FF7
19B0:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(4,2); 
19B4:  MOVLW  04
19B6:  MOVWF  x8A
19B8:  MOVLW  02
19BA:  MOVWF  x8B
19BC:  CALL   0BCE
....................                   printf(lcd_putc,"      "); 
19C0:  MOVLW  C6
19C2:  MOVWF  FF6
19C4:  MOVLW  01
19C6:  MOVWF  FF7
19C8:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(1,2); 
19CC:  MOVLW  01
19CE:  MOVWF  x8A
19D0:  MOVLW  02
19D2:  MOVWF  x8B
19D4:  CALL   0BCE
....................                   printf(lcd_putc,"A1:%U", A0); 
19D8:  MOVLW  CE
19DA:  MOVWF  FF6
19DC:  MOVLW  01
19DE:  MOVWF  FF7
19E0:  MOVLW  03
19E2:  MOVWF  x7C
19E4:  CALL   0FD2
19E8:  MOVFF  2C,7C
19EC:  MOVLW  1B
19EE:  MOVWF  x7D
19F0:  CALL   0EF6
....................                    
....................                   lcd_gotoxy(10,2); 
19F4:  MOVLW  0A
19F6:  MOVWF  x8A
19F8:  MOVLW  02
19FA:  MOVWF  x8B
19FC:  CALL   0BCE
....................                   printf(lcd_putc,"        "); 
1A00:  MOVLW  D4
1A02:  MOVWF  FF6
1A04:  MOVLW  01
1A06:  MOVWF  FF7
1A08:  CALL   0C6A
....................                   lcd_gotoxy(10,2); 
1A0C:  MOVLW  0A
1A0E:  MOVWF  x8A
1A10:  MOVLW  02
1A12:  MOVWF  x8B
1A14:  CALL   0BCE
....................                   printf(lcd_putc,"L:%u", L); 
1A18:  MOVLW  4C
1A1A:  MOVWF  x89
1A1C:  CALL   0C28
1A20:  MOVLW  3A
1A22:  MOVWF  x89
1A24:  CALL   0C28
1A28:  MOVFF  30,7C
1A2C:  MOVLW  1B
1A2E:  MOVWF  x7D
1A30:  CALL   0EF6
....................                
....................                break; 
1A34:  BRA    1FBE
....................        case 2: // Set high value  
....................                 //lcd_init();  // reset lcd 
....................                 //delay_ms(10); 
....................                              
....................                  
....................                   lcd_gotoxy(1,1); 
1A36:  MOVLW  01
1A38:  MOVWF  x8A
1A3A:  MOVWF  x8B
1A3C:  CALL   0BCE
....................                   printf(lcd_putc,"Set H           "); 
1A40:  MOVLW  DE
1A42:  MOVWF  FF6
1A44:  MOVLW  01
1A46:  MOVWF  FF7
1A48:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(4,2); 
1A4C:  MOVLW  04
1A4E:  MOVWF  x8A
1A50:  MOVLW  02
1A52:  MOVWF  x8B
1A54:  CALL   0BCE
....................                   printf(lcd_putc,"      "); 
1A58:  MOVLW  F0
1A5A:  MOVWF  FF6
1A5C:  MOVLW  01
1A5E:  MOVWF  FF7
1A60:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(1,2); 
1A64:  MOVLW  01
1A66:  MOVWF  x8A
1A68:  MOVLW  02
1A6A:  MOVWF  x8B
1A6C:  CALL   0BCE
....................                   printf(lcd_putc,"A0:%U", A0); 
1A70:  MOVLW  F8
1A72:  MOVWF  FF6
1A74:  MOVLW  01
1A76:  MOVWF  FF7
1A78:  MOVLW  03
1A7A:  MOVWF  x7C
1A7C:  CALL   0FD2
1A80:  MOVFF  2C,7C
1A84:  MOVLW  1B
1A86:  MOVWF  x7D
1A88:  CALL   0EF6
....................                    
....................                   lcd_gotoxy(12,2); 
1A8C:  MOVLW  0C
1A8E:  MOVWF  x8A
1A90:  MOVLW  02
1A92:  MOVWF  x8B
1A94:  CALL   0BCE
....................                   printf(lcd_putc,"     "); 
1A98:  MOVLW  FE
1A9A:  MOVWF  FF6
1A9C:  MOVLW  01
1A9E:  MOVWF  FF7
1AA0:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(10,2); 
1AA4:  MOVLW  0A
1AA6:  MOVWF  x8A
1AA8:  MOVLW  02
1AAA:  MOVWF  x8B
1AAC:  CALL   0BCE
....................                   printf(lcd_putc,"H:%u", H); 
1AB0:  MOVLW  48
1AB2:  MOVWF  x89
1AB4:  CALL   0C28
1AB8:  MOVLW  3A
1ABA:  MOVWF  x89
1ABC:  CALL   0C28
1AC0:  MOVFF  31,7C
1AC4:  MOVLW  1B
1AC6:  MOVWF  x7D
1AC8:  CALL   0EF6
....................                
....................                break; 
1ACC:  BRA    1FBE
....................        case 3: // Set manual value for blow 1 
....................                   // lcd_init();  // reset lcd 
....................                   // delay_ms(10); 
....................                               
....................                    set_adc_channel(0); // EasyPIC Board: Read ADC 2 for PWM fan 
1ACE:  MOVLW  00
1AD0:  MOVWF  01
1AD2:  MOVF   FC2,W
1AD4:  ANDLW  C3
1AD6:  IORWF  01,W
1AD8:  MOVWF  FC2
....................                    delay_ms(20); 
1ADA:  MOVLW  14
1ADC:  MOVWF  x90
1ADE:  CALL   06D2
....................                    A0= read_adc(); 
1AE2:  BSF    FC2.1
1AE4:  BTFSC  FC2.1
1AE6:  BRA    1AE4
1AE8:  MOVFF  FC4,2C
....................                   lcd_gotoxy(1,1); 
1AEC:  MOVLW  01
1AEE:  MOVWF  x8A
1AF0:  MOVWF  x8B
1AF2:  CALL   0BCE
....................                   printf(lcd_putc,"  Manual Blow 1 "); 
1AF6:  MOVLW  04
1AF8:  MOVWF  FF6
1AFA:  MOVLW  02
1AFC:  MOVWF  FF7
1AFE:  CALL   0C6A
....................                   lcd_gotoxy(4,2); 
1B02:  MOVLW  04
1B04:  MOVWF  x8A
1B06:  MOVLW  02
1B08:  MOVWF  x8B
1B0A:  CALL   0BCE
....................                   printf(lcd_putc,"   "); 
1B0E:  MOVLW  16
1B10:  MOVWF  FF6
1B12:  MOVLW  02
1B14:  MOVWF  FF7
1B16:  CALL   0C6A
....................                   lcd_gotoxy(1,2); 
1B1A:  MOVLW  01
1B1C:  MOVWF  x8A
1B1E:  MOVLW  02
1B20:  MOVWF  x8B
1B22:  CALL   0BCE
....................                   printf(lcd_putc,"A0:%U", A0); 
1B26:  MOVLW  1A
1B28:  MOVWF  FF6
1B2A:  MOVLW  02
1B2C:  MOVWF  FF7
1B2E:  MOVLW  03
1B30:  MOVWF  x7C
1B32:  CALL   0FD2
1B36:  MOVFF  2C,7C
1B3A:  MOVLW  1B
1B3C:  MOVWF  x7D
1B3E:  CALL   0EF6
....................                    
....................                   lcd_gotoxy(11,2); 
1B42:  MOVLW  0B
1B44:  MOVWF  x8A
1B46:  MOVLW  02
1B48:  MOVWF  x8B
1B4A:  CALL   0BCE
....................                   printf(lcd_putc,"     "); 
1B4E:  MOVLW  20
1B50:  MOVWF  FF6
1B52:  MOVLW  02
1B54:  MOVWF  FF7
1B56:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(8,2); 
1B5A:  MOVLW  08
1B5C:  MOVWF  x8A
1B5E:  MOVLW  02
1B60:  MOVWF  x8B
1B62:  CALL   0BCE
....................                   printf(lcd_putc,"M1:%u", M1); 
1B66:  MOVLW  26
1B68:  MOVWF  FF6
1B6A:  MOVLW  02
1B6C:  MOVWF  FF7
1B6E:  MOVLW  03
1B70:  MOVWF  x7C
1B72:  CALL   0FD2
1B76:  MOVFF  33,7C
1B7A:  MOVLW  1B
1B7C:  MOVWF  x7D
1B7E:  CALL   0EF6
....................                    
....................                   // manual program 
....................                   set_pwm1_duty(M1);  // BLOW 1 
1B82:  MOVFF  33,FBE
....................                   output_bit(PIN_B5,0); 
1B86:  BCF    F8A.5
1B88:  BCF    F93.5
....................                   // end manual program 
....................                break;   
1B8A:  BRA    1FBE
....................        case 4: // Set manual value for blow 2 
....................                  // lcd_init();  // reset lcd 
....................                  // delay_ms(10); 
....................                           
....................                  
....................                   lcd_gotoxy(1,1); 
1B8C:  MOVLW  01
1B8E:  MOVWF  x8A
1B90:  MOVWF  x8B
1B92:  CALL   0BCE
....................                   printf(lcd_putc,"  Manual Blow 2 "); 
1B96:  MOVLW  2C
1B98:  MOVWF  FF6
1B9A:  MOVLW  02
1B9C:  MOVWF  FF7
1B9E:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(4,2); 
1BA2:  MOVLW  04
1BA4:  MOVWF  x8A
1BA6:  MOVLW  02
1BA8:  MOVWF  x8B
1BAA:  CALL   0BCE
....................                   printf(lcd_putc,"   "); 
1BAE:  MOVLW  3E
1BB0:  MOVWF  FF6
1BB2:  MOVLW  02
1BB4:  MOVWF  FF7
1BB6:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(1,2); 
1BBA:  MOVLW  01
1BBC:  MOVWF  x8A
1BBE:  MOVLW  02
1BC0:  MOVWF  x8B
1BC2:  CALL   0BCE
....................                   printf(lcd_putc,"A0:%U", A0); 
1BC6:  MOVLW  42
1BC8:  MOVWF  FF6
1BCA:  MOVLW  02
1BCC:  MOVWF  FF7
1BCE:  MOVLW  03
1BD0:  MOVWF  x7C
1BD2:  CALL   0FD2
1BD6:  MOVFF  2C,7C
1BDA:  MOVLW  1B
1BDC:  MOVWF  x7D
1BDE:  CALL   0EF6
....................                    
....................                   lcd_gotoxy(11,2); 
1BE2:  MOVLW  0B
1BE4:  MOVWF  x8A
1BE6:  MOVLW  02
1BE8:  MOVWF  x8B
1BEA:  CALL   0BCE
....................                   printf(lcd_putc,"     "); 
1BEE:  MOVLW  48
1BF0:  MOVWF  FF6
1BF2:  MOVLW  02
1BF4:  MOVWF  FF7
1BF6:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(8,2); 
1BFA:  MOVLW  08
1BFC:  MOVWF  x8A
1BFE:  MOVLW  02
1C00:  MOVWF  x8B
1C02:  CALL   0BCE
....................                   printf(lcd_putc,"M2:%u", M2); 
1C06:  MOVLW  4E
1C08:  MOVWF  FF6
1C0A:  MOVLW  02
1C0C:  MOVWF  FF7
1C0E:  MOVLW  03
1C10:  MOVWF  x7C
1C12:  CALL   0FD2
1C16:  MOVFF  34,7C
1C1A:  MOVLW  1B
1C1C:  MOVWF  x7D
1C1E:  CALL   0EF6
....................                
....................                break;      
1C22:  BRA    1FBE
....................         case 5: // Choose No of Blows 
....................                   // lcd_init();  // reset lcd 
....................                   // delay_ms(10); 
....................                                     
....................                    if((A0>0)&&(A0<60)) 
1C24:  MOVF   2C,F
1C26:  BZ    1C32
1C28:  MOVF   2C,W
1C2A:  SUBLW  3B
1C2C:  BNC   1C32
....................                    { 
....................                      NoB = 1; // Blow 1 
1C2E:  MOVLW  01
1C30:  MOVWF  35
....................                        
....................                    } 
....................                    if((A0>=60)&&(A0<120)) 
1C32:  MOVF   2C,W
1C34:  SUBLW  3B
1C36:  BC    1C42
1C38:  MOVF   2C,W
1C3A:  SUBLW  77
1C3C:  BNC   1C42
....................                    { 
....................                      NoB = 2; 
1C3E:  MOVLW  02
1C40:  MOVWF  35
....................                        
....................                    } 
....................                    if((A0>120)) 
1C42:  MOVF   2C,W
1C44:  SUBLW  78
1C46:  BC    1C4C
....................                    { 
....................                    NoB = 3; 
1C48:  MOVLW  03
1C4A:  MOVWF  35
....................                      
....................                    } 
....................                     
....................                   lcd_gotoxy(1,1); 
1C4C:  MOVLW  01
1C4E:  MOVWF  x8A
1C50:  MOVWF  x8B
1C52:  CALL   0BCE
....................                   printf(lcd_putc,"Set Blows       "); 
1C56:  MOVLW  54
1C58:  MOVWF  FF6
1C5A:  MOVLW  02
1C5C:  MOVWF  FF7
1C5E:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(5,2); 
1C62:  MOVLW  05
1C64:  MOVWF  x8A
1C66:  MOVLW  02
1C68:  MOVWF  x8B
1C6A:  CALL   0BCE
....................                   printf(lcd_putc,"   "); 
1C6E:  MOVLW  66
1C70:  MOVWF  FF6
1C72:  MOVLW  02
1C74:  MOVWF  FF7
1C76:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(1,2); 
1C7A:  MOVLW  01
1C7C:  MOVWF  x8A
1C7E:  MOVLW  02
1C80:  MOVWF  x8B
1C82:  CALL   0BCE
....................                   printf(lcd_putc,"NoB:%U", NoB); 
1C86:  MOVLW  6A
1C88:  MOVWF  FF6
1C8A:  MOVLW  02
1C8C:  MOVWF  FF7
1C8E:  MOVLW  04
1C90:  MOVWF  x7C
1C92:  CALL   0FD2
1C96:  MOVFF  35,7C
1C9A:  MOVLW  1B
1C9C:  MOVWF  x7D
1C9E:  CALL   0EF6
....................                    
....................                   lcd_gotoxy(15,2); 
1CA2:  MOVLW  0F
1CA4:  MOVWF  x8A
1CA6:  MOVLW  02
1CA8:  MOVWF  x8B
1CAA:  CALL   0BCE
....................                   printf(lcd_putc,"   "); 
1CAE:  MOVLW  72
1CB0:  MOVWF  FF6
1CB2:  MOVLW  02
1CB4:  MOVWF  FF7
1CB6:  CALL   0C6A
....................                    
....................                   lcd_gotoxy(8,2); 
1CBA:  MOVLW  08
1CBC:  MOVWF  x8A
1CBE:  MOVLW  02
1CC0:  MOVWF  x8B
1CC2:  CALL   0BCE
....................                   printf(lcd_putc,"NoBSet:%U", NoBSet); 
1CC6:  MOVLW  76
1CC8:  MOVWF  FF6
1CCA:  MOVLW  02
1CCC:  MOVWF  FF7
1CCE:  MOVLW  07
1CD0:  MOVWF  x7C
1CD2:  CALL   0FD2
1CD6:  MOVFF  36,7C
1CDA:  MOVLW  1B
1CDC:  MOVWF  x7D
1CDE:  CALL   0EF6
....................                
....................                break;   
1CE2:  BRA    1FBE
....................        case 6: // Display BME280 id = 0x23 & id = 0x25 
....................               // lcd_init();  // reset lcd 
....................               // delay_ms(10); 
....................                
....................                lcd_gotoxy(3,1); 
1CE4:  MOVLW  03
1CE6:  MOVWF  x8A
1CE8:  MOVLW  01
1CEA:  MOVWF  x8B
1CEC:  CALL   0BCE
....................                printf(lcd_putc,"     "); 
1CF0:  MOVLW  80
1CF2:  MOVWF  FF6
1CF4:  MOVLW  02
1CF6:  MOVWF  FF7
1CF8:  CALL   0C6A
....................                    
....................                lcd_gotoxy(1,1); 
1CFC:  MOVLW  01
1CFE:  MOVWF  x8A
1D00:  MOVWF  x8B
1D02:  CALL   0BCE
....................                printf(lcd_putc,"T:%3.1f", temp.f); 
1D06:  MOVLW  54
1D08:  MOVWF  x89
1D0A:  CALL   0C28
1D0E:  MOVLW  3A
1D10:  MOVWF  x89
1D12:  CALL   0C28
1D16:  MOVLW  02
1D18:  MOVWF  FE9
1D1A:  MOVFF  63,7F
1D1E:  MOVFF  62,7E
1D22:  MOVFF  61,7D
1D26:  MOVFF  60,7C
1D2A:  MOVLW  01
1D2C:  MOVWF  x80
1D2E:  CALL   0D56
....................                 
....................                lcd_gotoxy(10,1); 
1D32:  MOVLW  0A
1D34:  MOVWF  x8A
1D36:  MOVLW  01
1D38:  MOVWF  x8B
1D3A:  CALL   0BCE
....................                printf(lcd_putc,"    "); 
1D3E:  MOVLW  86
1D40:  MOVWF  FF6
1D42:  MOVLW  02
1D44:  MOVWF  FF7
1D46:  CALL   0C6A
....................                 
....................                lcd_gotoxy(8,1); 
1D4A:  MOVLW  08
1D4C:  MOVWF  x8A
1D4E:  MOVLW  01
1D50:  MOVWF  x8B
1D52:  CALL   0BCE
....................                printf(lcd_putc,"P:%3.1f", press.f); 
1D56:  MOVLW  50
1D58:  MOVWF  x89
1D5A:  CALL   0C28
1D5E:  MOVLW  3A
1D60:  MOVWF  x89
1D62:  CALL   0C28
1D66:  MOVLW  02
1D68:  MOVWF  FE9
1D6A:  MOVFF  67,7F
1D6E:  MOVFF  66,7E
1D72:  MOVFF  65,7D
1D76:  MOVFF  64,7C
1D7A:  MOVLW  01
1D7C:  MOVWF  x80
1D7E:  CALL   0D56
....................                 
....................                lcd_gotoxy(3,2); 
1D82:  MOVLW  03
1D84:  MOVWF  x8A
1D86:  MOVLW  02
1D88:  MOVWF  x8B
1D8A:  CALL   0BCE
....................                printf(lcd_putc,"    "); 
1D8E:  MOVLW  8C
1D90:  MOVWF  FF6
1D92:  MOVLW  02
1D94:  MOVWF  FF7
1D96:  CALL   0C6A
....................                 
....................                lcd_gotoxy(1,2); 
1D9A:  MOVLW  01
1D9C:  MOVWF  x8A
1D9E:  MOVLW  02
1DA0:  MOVWF  x8B
1DA2:  CALL   0BCE
....................                printf(lcd_putc,"H:%3.1f", hu.f); 
1DA6:  MOVLW  48
1DA8:  MOVWF  x89
1DAA:  CALL   0C28
1DAE:  MOVLW  3A
1DB0:  MOVWF  x89
1DB2:  CALL   0C28
1DB6:  MOVLW  02
1DB8:  MOVWF  FE9
1DBA:  MOVFF  6B,7F
1DBE:  MOVFF  6A,7E
1DC2:  MOVFF  69,7D
1DC6:  MOVFF  68,7C
1DCA:  MOVLW  01
1DCC:  MOVWF  x80
1DCE:  CALL   0D56
....................                lcd_gotoxy(8,2); 
1DD2:  MOVLW  08
1DD4:  MOVWF  x8A
1DD6:  MOVLW  02
1DD8:  MOVWF  x8B
1DDA:  CALL   0BCE
....................                printf(lcd_putc,"      BME"); 
1DDE:  MOVLW  92
1DE0:  MOVWF  FF6
1DE2:  MOVLW  02
1DE4:  MOVWF  FF7
1DE6:  CALL   0C6A
....................                break; 
1DEA:  BRA    1FBE
....................        case 7: // Display SHT 
....................               // lcd_init();  // reset lcd 
....................               // delay_ms(10); 
....................                 
....................                lcd_gotoxy(7,1); 
1DEC:  MOVLW  07
1DEE:  MOVWF  x8A
1DF0:  MOVLW  01
1DF2:  MOVWF  x8B
1DF4:  CALL   0BCE
....................                printf(lcd_putc,"     "); 
1DF8:  MOVLW  9C
1DFA:  MOVWF  FF6
1DFC:  MOVLW  02
1DFE:  MOVWF  FF7
1E00:  CALL   0C6A
....................                 
....................                lcd_gotoxy(1,1); 
1E04:  MOVLW  01
1E06:  MOVWF  x8A
1E08:  MOVWF  x8B
1E0A:  CALL   0BCE
....................                printf(lcd_putc,"SHT T:%3.1f", temp_sht.f); 
1E0E:  MOVLW  A2
1E10:  MOVWF  FF6
1E12:  MOVLW  02
1E14:  MOVWF  FF7
1E16:  MOVLW  06
1E18:  MOVWF  x7C
1E1A:  CALL   0FD2
1E1E:  MOVLW  02
1E20:  MOVWF  FE9
1E22:  MOVFF  6F,7F
1E26:  MOVFF  6E,7E
1E2A:  MOVFF  6D,7D
1E2E:  MOVFF  6C,7C
1E32:  MOVLW  01
1E34:  MOVWF  x80
1E36:  CALL   0D56
....................                lcd_gotoxy(12,1); 
1E3A:  MOVLW  0C
1E3C:  MOVWF  x8A
1E3E:  MOVLW  01
1E40:  MOVWF  x8B
1E42:  CALL   0BCE
....................                printf(lcd_putc,"0C"); 
1E46:  MOVLW  30
1E48:  MOVWF  x89
1E4A:  CALL   0C28
1E4E:  MOVLW  43
1E50:  MOVWF  x89
1E52:  CALL   0C28
....................                lcd_gotoxy(14,1); 
1E56:  MOVLW  0E
1E58:  MOVWF  x8A
1E5A:  MOVLW  01
1E5C:  MOVWF  x8B
1E5E:  CALL   0BCE
....................                printf(lcd_putc,"   "); 
1E62:  MOVLW  AE
1E64:  MOVWF  FF6
1E66:  MOVLW  02
1E68:  MOVWF  FF7
1E6A:  CALL   0C6A
....................                 
....................                lcd_gotoxy(7,2); 
1E6E:  MOVLW  07
1E70:  MOVWF  x8A
1E72:  MOVLW  02
1E74:  MOVWF  x8B
1E76:  CALL   0BCE
....................                printf(lcd_putc,"     "); 
1E7A:  MOVLW  B2
1E7C:  MOVWF  FF6
1E7E:  MOVLW  02
1E80:  MOVWF  FF7
1E82:  CALL   0C6A
....................                 
....................                lcd_gotoxy(1,2); 
1E86:  MOVLW  01
1E88:  MOVWF  x8A
1E8A:  MOVLW  02
1E8C:  MOVWF  x8B
1E8E:  CALL   0BCE
....................                printf(lcd_putc,"SHT H:%3.1f", hum_sht.f); 
1E92:  MOVLW  B8
1E94:  MOVWF  FF6
1E96:  MOVLW  02
1E98:  MOVWF  FF7
1E9A:  MOVLW  06
1E9C:  MOVWF  x7C
1E9E:  CALL   0FD2
1EA2:  MOVLW  02
1EA4:  MOVWF  FE9
1EA6:  MOVFF  73,7F
1EAA:  MOVFF  72,7E
1EAE:  MOVFF  71,7D
1EB2:  MOVFF  70,7C
1EB6:  MOVLW  01
1EB8:  MOVWF  x80
1EBA:  CALL   0D56
....................                lcd_gotoxy(12,2); 
1EBE:  MOVLW  0C
1EC0:  MOVWF  x8A
1EC2:  MOVLW  02
1EC4:  MOVWF  x8B
1EC6:  CALL   0BCE
....................                printf(lcd_putc,"RH   "); 
1ECA:  MOVLW  C4
1ECC:  MOVWF  FF6
1ECE:  MOVLW  02
1ED0:  MOVWF  FF7
1ED2:  CALL   0C6A
....................                lcd_gotoxy(14,2); 
1ED6:  MOVLW  0E
1ED8:  MOVWF  x8A
1EDA:  MOVLW  02
1EDC:  MOVWF  x8B
1EDE:  CALL   0BCE
....................                printf(lcd_putc,"   "); 
1EE2:  MOVLW  CA
1EE4:  MOVWF  FF6
1EE6:  MOVLW  02
1EE8:  MOVWF  FF7
1EEA:  CALL   0C6A
....................                break; 
1EEE:  BRA    1FBE
....................                 
....................        case 8: // Display Max31855 
....................         
....................               // lcd_init();  // reset lcd 
....................               // delay_ms(10); 
....................                 
....................                lcd_gotoxy(7,1); 
1EF0:  MOVLW  07
1EF2:  MOVWF  x8A
1EF4:  MOVLW  01
1EF6:  MOVWF  x8B
1EF8:  CALL   0BCE
....................                printf(lcd_putc,"        "); 
1EFC:  MOVLW  CE
1EFE:  MOVWF  FF6
1F00:  MOVLW  02
1F02:  MOVWF  FF7
1F04:  CALL   0C6A
....................                 
....................                lcd_gotoxy(1,1); 
1F08:  MOVLW  01
1F0A:  MOVWF  x8A
1F0C:  MOVWF  x8B
1F0E:  CALL   0BCE
....................                printf(lcd_putc,"MAX T:%3.1f", temp_31855.f); 
1F12:  MOVLW  D8
1F14:  MOVWF  FF6
1F16:  MOVLW  02
1F18:  MOVWF  FF7
1F1A:  MOVLW  06
1F1C:  MOVWF  x7C
1F1E:  CALL   0FD2
1F22:  MOVLW  02
1F24:  MOVWF  FE9
1F26:  MOVFF  77,7F
1F2A:  MOVFF  76,7E
1F2E:  MOVFF  75,7D
1F32:  MOVFF  74,7C
1F36:  MOVLW  01
1F38:  MOVWF  x80
1F3A:  CALL   0D56
....................                lcd_gotoxy(1,2); 
1F3E:  MOVLW  01
1F40:  MOVWF  x8A
1F42:  MOVLW  02
1F44:  MOVWF  x8B
1F46:  CALL   0BCE
....................                printf(lcd_putc,"                "); 
1F4A:  MOVLW  E4
1F4C:  MOVWF  FF6
1F4E:  MOVLW  02
1F50:  MOVWF  FF7
1F52:  CALL   0C6A
....................                break; 
1F56:  BRA    1FBE
....................        case 9://  Display RSC 
....................               // lcd_init();  // reset lcd 
....................               // delay_ms(10); 
....................                lcd_gotoxy(7,1); 
1F58:  MOVLW  07
1F5A:  MOVWF  x8A
1F5C:  MOVLW  01
1F5E:  MOVWF  x8B
1F60:  CALL   0BCE
....................                printf(lcd_putc,"         "); 
1F64:  MOVLW  F6
1F66:  MOVWF  FF6
1F68:  MOVLW  02
1F6A:  MOVWF  FF7
1F6C:  CALL   0C6A
....................                lcd_gotoxy(1,1); 
1F70:  MOVLW  01
1F72:  MOVWF  x8A
1F74:  MOVWF  x8B
1F76:  CALL   0BCE
....................                printf(lcd_putc,"RSC P:%3.1f", press_rsc.f);       
1F7A:  MOVLW  00
1F7C:  MOVWF  FF6
1F7E:  MOVLW  03
1F80:  MOVWF  FF7
1F82:  MOVLW  06
1F84:  MOVWF  x7C
1F86:  CALL   0FD2
1F8A:  MOVLW  02
1F8C:  MOVWF  FE9
1F8E:  MOVFF  7B,7F
1F92:  MOVFF  7A,7E
1F96:  MOVFF  79,7D
1F9A:  MOVFF  78,7C
1F9E:  MOVLW  01
1FA0:  MOVWF  x80
1FA2:  CALL   0D56
....................                lcd_gotoxy(1,2); 
1FA6:  MOVLW  01
1FA8:  MOVWF  x8A
1FAA:  MOVLW  02
1FAC:  MOVWF  x8B
1FAE:  CALL   0BCE
....................                printf(lcd_putc,"                "); 
1FB2:  MOVLW  0C
1FB4:  MOVWF  FF6
1FB6:  MOVLW  03
1FB8:  MOVWF  FF7
1FBA:  CALL   0C6A
....................                break; 
....................        
....................                    
....................                    
....................                
....................                  
....................                
....................               
....................     } 
....................     //printf("\r\n adc chanel 2: %02x",A0); 
....................    
....................      
....................   
....................       if(can_kbhit() )   //if data is waiting in buffer... //if ( can_kbhit() ) 
1FBE:  BTFSC  F60.7
1FC0:  BRA    1FCA
1FC2:  MOVLB  F
1FC4:  BTFSS  x50.7
1FC6:  BRA    24A8
1FC8:  MOVLB  0
....................       {  
....................       // output_bit(PIN_B4,1); 
....................           // printf("haaa"); 
....................          if(can_getd(rx_id, &in_data[0], rx_len, rxstat)) { //...then get data from buffer 
1FCA:  CLRF   x7D
1FCC:  MOVLW  47
1FCE:  MOVWF  x7C
*
20CE:  MOVF   01,F
20D0:  BTFSC  FD8.2
20D2:  BRA    2498
....................             //printf("haha"); 
....................              if(rx_id ==21) 
20D4:  MOVF   43,W
20D6:  SUBLW  15
20D8:  BNZ   212E
20DA:  MOVF   44,F
20DC:  BNZ   212E
20DE:  MOVF   45,F
20E0:  BNZ   212E
20E2:  MOVF   46,F
20E4:  BNZ   212E
....................             { 
....................              
....................             press_rsc.b[0] = in_data[0]; 
20E6:  MOVFF  47,78
....................             press_rsc.b[1] = in_data[1]; 
20EA:  MOVFF  48,79
....................             press_rsc.b[2] = in_data[2]; 
20EE:  MOVFF  49,7A
....................             press_rsc.b[3] = in_data[3]; 
20F2:  MOVFF  4A,7B
....................              
....................             printf("Pressure RSC ID:21 = %f ",press_rsc.f); 
20F6:  MOVLW  1E
20F8:  MOVWF  FF6
20FA:  MOVLW  03
20FC:  MOVWF  FF7
20FE:  MOVLW  15
2100:  MOVLB  0
2102:  MOVWF  x80
2104:  CALL   07DA
2108:  MOVLW  89
210A:  MOVWF  FE9
210C:  MOVFF  7B,7F
2110:  MOVFF  7A,7E
2114:  MOVFF  79,7D
2118:  MOVFF  78,7C
211C:  MOVLW  02
211E:  MOVWF  x80
2120:  CALL   11D2
2124:  MOVLW  20
2126:  BTFSS  F9E.4
2128:  BRA    2126
212A:  MOVWF  FAD
212C:  MOVLB  F
....................             } 
....................             if(rx_id ==23) 
212E:  MOVF   43,W
2130:  SUBLW  17
2132:  BNZ   21CC
2134:  MOVF   44,F
2136:  BNZ   21CC
2138:  MOVF   45,F
213A:  BNZ   21CC
213C:  MOVF   46,F
213E:  BNZ   21CC
....................             { 
....................           //  output_bit(PIN_B4,1); 
....................             temp.b[0] = in_data[0]; 
2140:  MOVFF  47,60
....................             temp.b[1] = in_data[1]; 
2144:  MOVFF  48,61
....................             temp.b[2] = in_data[2]; 
2148:  MOVFF  49,62
....................             temp.b[3] = in_data[3]; 
214C:  MOVFF  4A,63
....................             press.b[0] = in_data[4]; 
2150:  MOVFF  4B,64
....................             press.b[1] = in_data[5]; 
2154:  MOVFF  4C,65
....................             press.b[2] = in_data[6]; 
2158:  MOVFF  4D,66
....................             press.b[3] = in_data[7]; 
215C:  MOVFF  4E,67
....................             printf("Temperature BME280 ID:23 = %f ",temp.f); 
2160:  MOVLW  38
2162:  MOVWF  FF6
2164:  MOVLW  03
2166:  MOVWF  FF7
2168:  MOVLW  1B
216A:  MOVLB  0
216C:  MOVWF  x80
216E:  CALL   07DA
2172:  MOVLW  89
2174:  MOVWF  FE9
2176:  MOVFF  63,7F
217A:  MOVFF  62,7E
217E:  MOVFF  61,7D
2182:  MOVFF  60,7C
2186:  MOVLW  02
2188:  MOVWF  x80
218A:  CALL   11D2
218E:  MOVLW  20
2190:  BTFSS  F9E.4
2192:  BRA    2190
2194:  MOVWF  FAD
....................             printf("Pressure BME280 ID:23 = %f ",press.f); 
2196:  MOVLW  58
2198:  MOVWF  FF6
219A:  MOVLW  03
219C:  MOVWF  FF7
219E:  MOVLW  18
21A0:  MOVWF  x80
21A2:  CALL   07DA
21A6:  MOVLW  89
21A8:  MOVWF  FE9
21AA:  MOVFF  67,7F
21AE:  MOVFF  66,7E
21B2:  MOVFF  65,7D
21B6:  MOVFF  64,7C
21BA:  MOVLW  02
21BC:  MOVWF  x80
21BE:  CALL   11D2
21C2:  MOVLW  20
21C4:  BTFSS  F9E.4
21C6:  BRA    21C4
21C8:  MOVWF  FAD
21CA:  MOVLB  F
....................             } 
....................              if(rx_id ==25) 
21CC:  MOVF   43,W
21CE:  SUBLW  19
21D0:  BNZ   2226
21D2:  MOVF   44,F
21D4:  BNZ   2226
21D6:  MOVF   45,F
21D8:  BNZ   2226
21DA:  MOVF   46,F
21DC:  BNZ   2226
....................             { 
....................              
....................             hu.b[0] = in_data[0]; 
21DE:  MOVFF  47,68
....................             hu.b[1] = in_data[1]; 
21E2:  MOVFF  48,69
....................             hu.b[2] = in_data[2]; 
21E6:  MOVFF  49,6A
....................             hu.b[3] = in_data[3]; 
21EA:  MOVFF  4A,6B
....................              
....................             printf("Humidity BME280 ID:25 = %f ",hu.f); 
21EE:  MOVLW  74
21F0:  MOVWF  FF6
21F2:  MOVLW  03
21F4:  MOVWF  FF7
21F6:  MOVLW  18
21F8:  MOVLB  0
21FA:  MOVWF  x80
21FC:  CALL   07DA
2200:  MOVLW  89
2202:  MOVWF  FE9
2204:  MOVFF  6B,7F
2208:  MOVFF  6A,7E
220C:  MOVFF  69,7D
2210:  MOVFF  68,7C
2214:  MOVLW  02
2216:  MOVWF  x80
2218:  CALL   11D2
221C:  MOVLW  20
221E:  BTFSS  F9E.4
2220:  BRA    221E
2222:  MOVWF  FAD
2224:  MOVLB  F
....................             } 
....................             if(rx_id ==27) 
2226:  MOVF   43,W
2228:  SUBLW  1B
222A:  BNZ   22C4
222C:  MOVF   44,F
222E:  BNZ   22C4
2230:  MOVF   45,F
2232:  BNZ   22C4
2234:  MOVF   46,F
2236:  BNZ   22C4
....................             { 
....................             temp_sht.b[0] = in_data[0]; 
2238:  MOVFF  47,6C
....................             temp_sht.b[1] = in_data[1]; 
223C:  MOVFF  48,6D
....................             temp_sht.b[2] = in_data[2]; 
2240:  MOVFF  49,6E
....................             temp_sht.b[3] = in_data[3]; 
2244:  MOVFF  4A,6F
....................              
....................             hum_sht.b[0] = in_data[4]; 
2248:  MOVFF  4B,70
....................             hum_sht.b[1] = in_data[5]; 
224C:  MOVFF  4C,71
....................             hum_sht.b[2] = in_data[6]; 
2250:  MOVFF  4D,72
....................             hum_sht.b[3] = in_data[7]; 
2254:  MOVFF  4E,73
....................              
....................             printf("Temperature SHT_75 ID:27 = %f ",temp_sht.f); 
2258:  MOVLW  90
225A:  MOVWF  FF6
225C:  MOVLW  03
225E:  MOVWF  FF7
2260:  MOVLW  1B
2262:  MOVLB  0
2264:  MOVWF  x80
2266:  CALL   07DA
226A:  MOVLW  89
226C:  MOVWF  FE9
226E:  MOVFF  6F,7F
2272:  MOVFF  6E,7E
2276:  MOVFF  6D,7D
227A:  MOVFF  6C,7C
227E:  MOVLW  02
2280:  MOVWF  x80
2282:  CALL   11D2
2286:  MOVLW  20
2288:  BTFSS  F9E.4
228A:  BRA    2288
228C:  MOVWF  FAD
....................             printf("Pressure SHT75 ID:27 = %f ",hum_sht.f); 
228E:  MOVLW  B0
2290:  MOVWF  FF6
2292:  MOVLW  03
2294:  MOVWF  FF7
2296:  MOVLW  17
2298:  MOVWF  x80
229A:  CALL   07DA
229E:  MOVLW  89
22A0:  MOVWF  FE9
22A2:  MOVFF  73,7F
22A6:  MOVFF  72,7E
22AA:  MOVFF  71,7D
22AE:  MOVFF  70,7C
22B2:  MOVLW  02
22B4:  MOVWF  x80
22B6:  CALL   11D2
22BA:  MOVLW  20
22BC:  BTFSS  F9E.4
22BE:  BRA    22BC
22C0:  MOVWF  FAD
22C2:  MOVLB  F
....................              
....................             } 
....................              if(rx_id ==29) 
22C4:  MOVF   43,W
22C6:  SUBLW  1D
22C8:  BNZ   231E
22CA:  MOVF   44,F
22CC:  BNZ   231E
22CE:  MOVF   45,F
22D0:  BNZ   231E
22D2:  MOVF   46,F
22D4:  BNZ   231E
....................             { 
....................              
....................             temp_31855.b[0] = in_data[0]; 
22D6:  MOVFF  47,74
....................             temp_31855.b[1] = in_data[1]; 
22DA:  MOVFF  48,75
....................             temp_31855.b[2] = in_data[2]; 
22DE:  MOVFF  49,76
....................             temp_31855.b[3] = in_data[3]; 
22E2:  MOVFF  4A,77
....................              
....................             printf("Temperature MAX31855 ID:29 = %f ",temp_31855.f); 
22E6:  MOVLW  CC
22E8:  MOVWF  FF6
22EA:  MOVLW  03
22EC:  MOVWF  FF7
22EE:  MOVLW  1D
22F0:  MOVLB  0
22F2:  MOVWF  x80
22F4:  CALL   07DA
22F8:  MOVLW  89
22FA:  MOVWF  FE9
22FC:  MOVFF  77,7F
2300:  MOVFF  76,7E
2304:  MOVFF  75,7D
2308:  MOVFF  74,7C
230C:  MOVLW  02
230E:  MOVWF  x80
2310:  CALL   11D2
2314:  MOVLW  20
2316:  BTFSS  F9E.4
2318:  BRA    2316
231A:  MOVWF  FAD
231C:  MOVLB  F
....................             } 
....................              
....................             printf("\r\nGOT: BUFF=%U ID=%LU LEN=%U OVF=%U ", rxstat.buffer, rx_id, rx_len, rxstat.err_ovfl); 
231E:  MOVLW  00
2320:  BTFSC  42.4
2322:  MOVLW  01
2324:  MOVLB  0
2326:  MOVWF  x7C
2328:  MOVLW  00
232A:  BTFSC  42.0
232C:  MOVLW  01
232E:  MOVWF  x7D
2330:  MOVLW  EE
2332:  MOVWF  FF6
2334:  MOVLW  03
2336:  MOVWF  FF7
2338:  MOVLW  0C
233A:  MOVWF  x80
233C:  CALL   07DA
2340:  MOVFF  7C,80
2344:  MOVLW  1B
2346:  MOVWF  x81
2348:  CALL   1354
234C:  MOVLW  FC
234E:  MOVWF  FF6
2350:  MOVLW  03
2352:  MOVWF  FF7
2354:  MOVLW  04
2356:  MOVWF  x80
2358:  CALL   07DA
235C:  MOVLW  41
235E:  MOVWF  FE9
2360:  MOVFF  46,81
2364:  MOVFF  45,80
2368:  MOVFF  44,7F
236C:  MOVFF  43,7E
2370:  GOTO   13C0
2374:  MOVLW  03
2376:  MOVWF  FF6
2378:  MOVLW  04
237A:  MOVWF  FF7
237C:  MOVLW  05
237E:  MOVWF  x80
2380:  CALL   07DA
2384:  MOVFF  4F,80
2388:  MOVLW  1B
238A:  MOVWF  x81
238C:  CALL   1354
2390:  MOVLW  0A
2392:  MOVWF  FF6
2394:  MOVLW  04
2396:  MOVWF  FF7
2398:  MOVLW  05
239A:  MOVWF  x80
239C:  CALL   07DA
23A0:  MOVFF  7D,80
23A4:  MOVLW  1B
23A6:  MOVWF  x81
23A8:  CALL   1354
23AC:  MOVLW  20
23AE:  BTFSS  F9E.4
23B0:  BRA    23AE
23B2:  MOVWF  FAD
....................             printf("FILT=%U RTR=%U EXT=%U INV=%U", rxstat.filthit, rxstat.rtr, rxstat.ext, rxstat.inv); 
23B4:  MOVFF  42,00
23B8:  RRCF   42,W
23BA:  ANDLW  07
23BC:  MOVWF  x7C
23BE:  MOVLW  00
23C0:  BTFSC  42.5
23C2:  MOVLW  01
23C4:  MOVWF  x7D
23C6:  MOVLW  00
23C8:  BTFSC  42.6
23CA:  MOVLW  01
23CC:  MOVWF  x7E
23CE:  MOVLW  00
23D0:  BTFSC  42.7
23D2:  MOVLW  01
23D4:  MOVWF  x7F
23D6:  MOVLW  14
23D8:  MOVWF  FF6
23DA:  MOVLW  04
23DC:  MOVWF  FF7
23DE:  MOVLW  05
23E0:  MOVWF  x80
23E2:  CALL   07DA
23E6:  MOVFF  7C,80
23EA:  MOVLW  1B
23EC:  MOVWF  x81
23EE:  CALL   1354
23F2:  MOVLW  1B
23F4:  MOVWF  FF6
23F6:  MOVLW  04
23F8:  MOVWF  FF7
23FA:  MOVLW  05
23FC:  MOVWF  x80
23FE:  CALL   07DA
2402:  MOVFF  7D,80
2406:  MOVLW  1B
2408:  MOVWF  x81
240A:  CALL   1354
240E:  MOVLW  22
2410:  MOVWF  FF6
2412:  MOVLW  04
2414:  MOVWF  FF7
2416:  MOVLW  05
2418:  MOVWF  x80
241A:  CALL   07DA
241E:  MOVFF  7E,80
2422:  MOVLW  1B
2424:  MOVWF  x81
2426:  CALL   1354
242A:  MOVLW  29
242C:  MOVWF  FF6
242E:  MOVLW  04
2430:  MOVWF  FF7
2432:  MOVLW  05
2434:  MOVWF  x80
2436:  CALL   07DA
243A:  MOVFF  7F,80
243E:  MOVLW  1B
2440:  MOVWF  x81
2442:  CALL   1354
....................             printf("\r\n    DATA = "); 
2446:  MOVLW  32
2448:  MOVWF  FF6
244A:  MOVLW  04
244C:  MOVWF  FF7
244E:  CALL   0452
....................             for (i=0;i<rx_len;i++) { 
2452:  CLRF   5F
2454:  MOVF   4F,W
2456:  SUBWF  5F,W
2458:  BC    2484
....................                printf("%X ",in_data[i]); 
245A:  CLRF   03
245C:  MOVF   5F,W
245E:  ADDLW  47
2460:  MOVWF  FE9
2462:  MOVLW  00
2464:  ADDWFC 03,W
2466:  MOVWF  FEA
2468:  MOVFF  FEF,7C
246C:  MOVFF  7C,7D
2470:  MOVLW  37
2472:  MOVWF  x7E
2474:  CALL   07FA
2478:  MOVLW  20
247A:  BTFSS  F9E.4
247C:  BRA    247A
247E:  MOVWF  FAD
2480:  INCF   5F,F
2482:  BRA    2454
....................             } 
....................             printf("\r\n"); 
2484:  MOVLW  0D
2486:  BTFSS  F9E.4
2488:  BRA    2486
248A:  MOVWF  FAD
248C:  MOVLW  0A
248E:  BTFSS  F9E.4
2490:  BRA    248E
2492:  MOVWF  FAD
....................             
....................          } 
2494:  BRA    24A6
2496:  MOVLB  F
....................           
....................          else { 
....................             printf("\r\nFAIL on GETD\r\n"); 
2498:  MOVLW  40
249A:  MOVWF  FF6
249C:  MOVLW  04
249E:  MOVWF  FF7
24A0:  MOVLB  0
24A2:  CALL   0452
24A6:  MOVLB  F
....................          } 
....................             
....................       } 
....................  
....................       //every two seconds, send new data if transmit buffer is empty 
....................      /* 
....................       if ( can_tbe() && (ms > 2000)) 
....................       { 
....................          ms=0; 
....................          i=can_putd(tx_id, out_data, tx_len,tx_pri,tx_ext,tx_rtr); //put data on transmit buffer 
....................          if (i != 0xFF) { //success, a transmit buffer was open 
....................             printf("\r\nPUT %U: ID=%LU LEN=%U ", i, tx_id, tx_len); 
....................             printf("PRI=%U EXT=%U RTR=%U\r\n   DATA = ", tx_pri, tx_ext, tx_rtr); 
....................             for (i=0;i<tx_len;i++) { 
....................                printf("%X ",out_data[i]); 
....................             } 
....................             printf("\r\n"); 
....................              
....................          } 
....................          else { //fail, no transmit buffer was open 
....................             printf("\r\nFAIL on PUTD\r\n"); 
....................          } 
....................       } 
....................       */ 
....................  
....................     delay_ms(200); 
24A8:  MOVLW  C8
24AA:  MOVLB  0
24AC:  MOVWF  x90
24AE:  CALL   06D2
24B2:  GOTO   1552
....................       
....................    } 
.................... } 
24B6:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8600   PBADEN LPT1OSC MCLR
   Word  4: 0091   STVREN NOLVP BBSIZ2K NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
